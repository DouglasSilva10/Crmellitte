import React, { useState, useRef } from 'react';

const CRMDashboard = () => {
  // Estados para gerenciamento de funis
  const [funnels, setFunnels] = useState([
    {
      id: 'funil_captacao',
      name: 'Funil de Captação',
      columns: [
        { id: 'oportunidade', name: 'Oportunidade', color: 'bg-blue-50', textColor: 'text-blue-800', borderColor: 'border-blue-300', shouldSum: true, showCount: true, fontSize: 'text-sm' },
        { id: 'negociacao', name: 'Negociação', color: 'bg-orange-50', textColor: 'text-orange-800', borderColor: 'border-orange-300', shouldSum: true, showCount: true, fontSize: 'text-sm' },
        { id: 'agendado', name: 'Agendado', color: 'bg-purple-50', textColor: 'text-purple-800', borderColor: 'border-purple-300', shouldSum: true, showCount: true, fontSize: 'text-sm' },
        { id: 'vendas', name: 'Vendas', color: 'bg-green-50', textColor: 'text-green-800', borderColor: 'border-green-300', shouldSum: true, showCount: true, fontSize: 'text-sm' },
        { id: 'perdido', name: 'Perdido', color: 'bg-red-50', textColor: 'text-red-800', borderColor: 'border-red-300', shouldSum: false, showCount: true, fontSize: 'text-sm' }
      ],
      leads: {
        oportunidade: [
          { id: 1, name: 'Ana Silva', phone: '(11) 99999-1111', source: 'Google', avatar: 'AS', color: 'bg-pink-500', value: 1500, 
          sexo: 'Feminino', idade: 28, dataContato: '2024-01-15' },
          { id: 2, name: 'João Santos', phone: '(11) 88888-2222', source: 'Instagram', avatar: 'JS', color: 'bg-blue-500', value: 2300,
          sexo: 'Masculino', idade: 34, dataContato: '2024-01-20' },
          { id: 3, name: 'Maria Costa', phone: '(11) 77777-3333', source: 'Facebook', avatar: 'MC', color: 'bg-green-500', value: 1800,
          sexo: 'Feminino', idade: 31, dataContato: '2024-01-25' }
        ],
        negociacao: [
          { id: 4, name: 'Carlos Mendes', phone: '(11) 66666-4444', source: 'LinkedIn', avatar: 'CM', color: 'bg-orange-500', value: 3200,
          sexo: 'Masculino', idade: 42, dataContato: '2024-02-01' },
          { id: 5, name: 'Lucia Ferreira', phone: '(11) 44444-4444', source: 'Instagram', avatar: 'LF', color: 'bg-pink-500', value: 2800,
          sexo: 'Feminino', idade: 29, dataContato: '2024-02-05' },
          { id: 6, name: 'Ricardo Oliveira', phone: '(11) 33333-3333', source: 'Google', avatar: 'RO', color: 'bg-blue-500', value: 2100,
          sexo: 'Masculino', idade: 38, dataContato: '2024-02-10' }
        ],
        agendado: [
          { id: 7, name: 'Amanda Silva', phone: '(11) 22222-2222', source: 'Instagram', avatar: 'AS', color: 'bg-red-500', value: 1900,
          sexo: 'Feminino', idade: 26, dataContato: '2024-02-15' },
          { id: 8, name: 'Fernanda Lima', phone: '(11) 99999-0000', source: 'Google', avatar: 'FL', color: 'bg-green-500', value: 2400,
          sexo: 'Feminino', idade: 33, dataContato: '2024-02-20' }
        ],
        vendas: [
          { id: 9, name: 'Roberto Santos', phone: '(11) 88888-0000', source: 'LinkedIn', avatar: 'RS', color: 'bg-green-500', value: 4500,
          sexo: 'Masculino', idade: 45, dataContato: '2024-01-10' },
          { id: 10, name: 'Carla Pereira', phone: '(11) 77777-0000', source: 'Instagram', avatar: 'CP', color: 'bg-purple-500', value: 3700,
          sexo: 'Feminino', idade: 37, dataContato: '2024-01-30' }
        ],
        perdido: [
          { id: 11, name: 'Pedro Lima', phone: '(11) 66666-0000', source: 'Parcerias', avatar: 'PL', color: 'bg-purple-500', value: 0,
          sexo: 'Masculino', idade: 39, dataContato: '2024-01-05' }
        ]
      }
    }
  ]);
  
  const [currentFunnelId, setCurrentFunnelId] = useState('funil_captacao');
  const [editingFunnel, setEditingFunnel] = useState(false);
  const [tempFunnelName, setTempFunnelName] = useState('');
  
  // Estados para criação de novo funil
  const [creatingFunnel, setCreatingFunnel] = useState(false);
  const [newFunnelForm, setNewFunnelForm] = useState({
    name: '',
    columns: [] // Array de colunas customizadas
  });
  
  // Estados para adicionar colunas no novo funil
  const [addingColumnToNewFunnel, setAddingColumnToNewFunnel] = useState(false);
  const [newFunnelColumnForm, setNewFunnelColumnForm] = useState({
    name: '',
    color: 'bg-blue-50',
    shouldSum: false,
    showCount: true,
    fontSize: 'text-sm'
  });
  
  // Dados derivados do funil atual
  const currentFunnel = funnels.find(f => f.id === currentFunnelId) || funnels[0];
  const funnelName = currentFunnel?.name || 'Funil';
  const leads = currentFunnel?.leads || {};
  const columns = currentFunnel?.columns || [];
  
  // Função auxiliar para atualizar funis
  const setLeads = (updateFn) => {
    setFunnels(prev => prev.map(funnel => 
      funnel.id === currentFunnelId 
        ? { ...funnel, leads: updateFn(funnel.leads) }
        : funnel
    ));
  };

  const setColumns = (updateFn) => {
    setFunnels(prev => prev.map(funnel => 
      funnel.id === currentFunnelId 
        ? { ...funnel, columns: typeof updateFn === 'function' ? updateFn(funnel.columns) : updateFn }
        : funnel
    ));
  };

  const [editingColumn, setEditingColumn] = useState(null);
  const [editForm, setEditForm] = useState({ name: '', color: '', shouldSum: false, showCount: true, fontSize: 'text-sm' });
  const [openDropdown, setOpenDropdown] = useState(null);
  const [creatingColumn, setCreatingColumn] = useState(false);
  const [newColumnForm, setNewColumnForm] = useState({ name: '', color: 'bg-blue-50', shouldSum: false, showCount: true, fontSize: 'text-sm' });
  
  // Estados para drag and drop de leads
  const [isDragging, setIsDragging] = useState(false);
  const [draggedItem, setDraggedItem] = useState(null);
  const [dropTarget, setDropTarget] = useState(null);
  const [dragPosition, setDragPosition] = useState({ x: 0, y: 0 });
  const dragItemRef = useRef(null);

  // Estados para drag and drop de colunas
  const [isDraggingColumn, setIsDraggingColumn] = useState(false);
  const [draggedColumn, setDraggedColumn] = useState(null);
  const [columnDropTarget, setColumnDropTarget] = useState(null);
  const [columnDragPosition, setColumnDragPosition] = useState({ x: 0, y: 0 });
  const dragColumnRef = useRef(null);

  // Estados para configuração de cards
  const [editingCard, setEditingCard] = useState(null);
  const [cardEditForm, setCardEditForm] = useState({
    name: '',
    phone: '',
    source: '',
    value: 0,
    color: '',
    avatar: '',
    notes: ''
  });

  // Estados para navegação
  const [currentPage, setCurrentPage] = useState('dashboard'); // dashboard, crm, clientes, configuracoes
  const [viewingClientId, setViewingClientId] = useState(null);
  
  // Estados para configurações e colaboradores
  const [editingCollaborator, setEditingCollaborator] = useState(null);
  const [collaborators, setCollaborators] = useState([
    {
      id: 'user_1',
      name: 'Douglas Silva',
      email: 'douglas@elitesolutions.com',
      role: 'Administrador',
      avatar: 'DS',
      color: 'bg-gradient-to-r from-purple-500 to-pink-500',
      lastLogin: '2024-01-15T10:30:00Z',
      status: 'online',
      permissions: ['dashboard', 'crm', 'clientes', 'configuracoes', 'relatorios']
    },
    {
      id: 'user_2',
      name: 'Ana Beatriz',
      email: 'ana@elitesolutions.com',
      role: 'Vendedora',
      avatar: 'AB',
      color: 'bg-gradient-to-r from-blue-500 to-cyan-500',
      lastLogin: '2024-01-14T16:45:00Z',
      status: 'away',
      permissions: ['dashboard', 'crm', 'clientes']
    },
    {
      id: 'user_3',
      name: 'Carlos Mendes',
      email: 'carlos@elitesolutions.com',
      role: 'Supervisor',
      avatar: 'CM',
      color: 'bg-gradient-to-r from-green-500 to-emerald-500',
      lastLogin: '2024-01-13T09:15:00Z',
      status: 'offline',
      permissions: ['dashboard', 'crm', 'clientes', 'relatorios']
    }
  ]);
  
  const [collaboratorForm, setCollaboratorForm] = useState({
    name: '',
    email: '',
    role: '',
    avatar: '',
    color: 'bg-gradient-to-r from-blue-500 to-purple-500',
    permissions: []
  });
  
  // Estados para filtros do dashboard
  const [dashboardFilters, setDashboardFilters] = useState({
    periodo: 'todos', // todos, ultimo_mes, ultimo_trimestre, ultimo_ano, hoje, semana, personalizado
    funil: 'todos', // todos, ou id do funil específico
    origem: 'todas', // todas, ou fonte específica
    sexo: 'todos', // todos, masculino, feminino
    faixaEtaria: 'todas', // todas, 18-25, 26-35, 36-45, 46+
    status: 'todos', // todos, ativo, inativo
    valorMinimo: '',
    valorMaximo: '',
    dataInicial: '',
    dataFinal: '',
    statusPagamento: 'todos' // todos, pendente, pago, atrasado
  });

  // Estado para controlar o modal de calendário personalizado
  const [showCustomDateModal, setShowCustomDateModal] = useState(false);

  // Estados para o header superior
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: 'success',
      title: 'Meta Batida! 🎉',
      message: 'Você bateu a meta de 50 leads este mês!',
      time: '2 min atrás',
      isNew: true,
      icon: '🏆',
      action: () => setCurrentPage('dashboard'),
      actionText: 'Ver Dashboard'
    },
    {
      id: 2,
      type: 'warning',
      title: 'Funil parado há 6 horas',
      message: 'Nenhuma movimentação no Funil de Captação',
      time: '6 h atrás',
      isNew: true,
      icon: '⚠️',
      action: () => setCurrentPage('crm'),
      actionText: 'Ir para CRM'
    },
    {
      id: 3,
      type: 'info',
      title: 'Lead movido para Vendas',
      message: 'Ana Silva progrediu de Negociação → Vendas (R$ 1.500)',
      time: '1 h atrás',
      isNew: true,
      icon: '📈',
      action: () => {
        setCurrentPage('crm');
        // Poderia focar no lead específico
      },
      actionText: 'Ver no CRM'
    },
    {
      id: 4,
      type: 'target',
      title: 'Próximo da meta semanal!',
      message: 'Faltam apenas 2 leads para bater a meta desta semana',
      time: '3 h atrás',
      isNew: true,
      icon: '🎯',
      action: () => setCurrentPage('dashboard'),
      actionText: 'Ver Progresso'
    },
    {
      id: 5,
      type: 'conversion',
      title: 'Nova conversão realizada',
      message: 'Roberto Santos fechou negócio - R$ 4.500 💰',
      time: '5 h atrás',
      isNew: false,
      icon: '💰',
      action: () => {
        setCurrentPage('clientes');
        setViewingClientId(9); // ID do Roberto
      },
      actionText: 'Ver Cliente'
    },
    {
      id: 6,
      type: 'system',
      title: 'Backup automático concluído',
      message: 'Todos os dados foram salvos com sucesso',
      time: '12 h atrás',
      isNew: false,
      icon: '💾',
      action: null,
      actionText: null
    },
    {
      id: 7,
      type: 'filter',
      title: 'Filtros ativos no Dashboard',
      message: 'Você tem 3 filtros aplicados que podem estar limitando a visualização',
      time: '1 dia atrás',
      isNew: false,
      icon: '🔍',
      action: () => {
        setCurrentPage('dashboard');
        clearAllFilters();
      },
      actionText: 'Limpar Filtros'
    },
    {
      id: 8,
      type: 'funnel',
      title: 'Novo funil criado',
      message: 'Funil "Vendas B2B" foi criado com 4 colunas',
      time: '2 dias atrás',
      isNew: false,
      icon: '🆕',
      action: () => setCurrentPage('crm'),
      actionText: 'Ver Funil'
    },
    {
      id: 9,
      type: 'performance',
      title: 'Instagram com alta conversão',
      message: 'Taxa de 35% esta semana - melhor fonte do mês!',
      time: '2 dias atrás',
      isNew: false,
      icon: '📊',
      action: () => {
        setCurrentPage('dashboard');
        setDashboardFilters(prev => ({ ...prev, origem: 'Instagram' }));
      },
      actionText: 'Analisar'
    },
    {
      id: 10,
      type: 'reminder',
      title: 'Leads sem follow-up',
      message: '5 leads na coluna "Negociação" há mais de 3 dias',
      time: '1 dia atrás',
      isNew: false,
      icon: '⏰',
      action: () => setCurrentPage('crm'),
      actionText: 'Verificar'
    }
  ]);

  const unreadNotifications = notifications.filter(n => n.isNew).length;

  // Estado para controlar a visualização dos leads por origem
  const [origemViewMode, setOrigemViewMode] = useState('geral'); // geral, por_funil, por_etapa

  const colorOptions = [
    { bg: 'bg-blue-50', text: 'text-blue-800', border: 'border-blue-300', name: 'Azul' },
    { bg: 'bg-green-50', text: 'text-green-800', border: 'border-green-300', name: 'Verde' },
    { bg: 'bg-purple-50', text: 'text-purple-800', border: 'border-purple-300', name: 'Roxo' },
    { bg: 'bg-orange-50', text: 'text-orange-800', border: 'border-orange-300', name: 'Laranja' },
    { bg: 'bg-red-50', text: 'text-red-800', border: 'border-red-300', name: 'Vermelho' },
    { bg: 'bg-yellow-50', text: 'text-yellow-800', border: 'border-yellow-300', name: 'Amarelo' },
    { bg: 'bg-pink-50', text: 'text-pink-800', border: 'border-pink-300', name: 'Rosa' },
    { bg: 'bg-indigo-50', text: 'text-indigo-800', border: 'border-indigo-300', name: 'Índigo' },
    { bg: 'bg-teal-50', text: 'text-teal-800', border: 'border-teal-300', name: 'Teal' },
    { bg: 'bg-gray-50', text: 'text-gray-800', border: 'border-gray-300', name: 'Cinza' }
  ];

  const getSourceIcon = (source) => {
    const iconClass = "w-4 h-4";
    switch(source.toLowerCase()) {
      case 'google':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="none">
            <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
            <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
            <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
            <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
          </svg>
        );
      case 'linkedin':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#0A66C2">
            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
          </svg>
        );
      case 'instagram':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="url(#instagram-gradient)">
            <defs>
              <linearGradient id="instagram-gradient" x1="0%" y1="100%" x2="100%" y2="0%">
                <stop offset="0%" style={{stopColor:'#FD5949'}} />
                <stop offset="50%" style={{stopColor:'#D6249F'}} />
                <stop offset="100%" style={{stopColor:'#285AEB'}} />
              </linearGradient>
            </defs>
            <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
          </svg>
        );
      case 'facebook':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#1877F2">
            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
          </svg>
        );
      case 'whatsapp':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#25D366">
            <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.465 3.488"/>
          </svg>
        );
      case 'website':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#6B7280">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/>
          </svg>
        );
      case 'indicação':
      case 'indicacao':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#F59E0B">
            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
          </svg>
        );
      case 'parcerias':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#8B5CF6">
            <path d="M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm4 18v-6h2.5l-2.54-7.63A2.996 2.996 0 0017.1 7H16c-.8 0-1.54.37-2.03.99L12 10.5l-1.97-2.51A2.996 2.996 0 007.1 7H6c-1.66 0-3 1.34-3 3 0 .35.06.69.18 1H5v11h5v-6h4v6h5z"/>
          </svg>
        );
      case 'telefone':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#10B981">
            <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
          </svg>
        );
      case 'email':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#EF4444">
            <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
          </svg>
        );
      case 'outros':
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#6B7280">
            <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
          </svg>
        );
      default:
        return (
          <svg className={iconClass} viewBox="0 0 24 24" fill="#6B7280">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
        );
    }
  };

  const handleEditColumn = (column) => {
    setEditingColumn(column.id);
    setEditForm({
      name: column.name,
      color: column.color,
      shouldSum: column.shouldSum,
      showCount: column.showCount !== undefined ? column.showCount : true,
      fontSize: column.fontSize || 'text-sm'
    });
    setOpenDropdown(null);
  };

  const handleSaveColumn = () => {
    setColumns(prev => prev.map(col => 
      col.id === editingColumn 
        ? { 
            ...col, 
            name: editForm.name, 
            color: editForm.color,
            textColor: colorOptions.find(c => c.bg === editForm.color)?.text || 'text-gray-800',
            borderColor: colorOptions.find(c => c.bg === editForm.color)?.border || 'border-gray-300',
            shouldSum: editForm.shouldSum,
            showCount: editForm.showCount,
            fontSize: editForm.fontSize
          }
        : col
    ));
    setEditingColumn(null);
    setEditForm({ name: '', color: '', shouldSum: false, showCount: true, fontSize: 'text-sm' });
  };

  const handleDeleteColumn = (columnId) => {
    if (window.confirm('Tem certeza que deseja excluir esta coluna?')) {
      setColumns(prev => prev.filter(col => col.id !== columnId));
    }
    setOpenDropdown(null);
  };

  const calculateColumnTotal = (columnId, shouldSum) => {
    if (!shouldSum) return null;
    const columnLeads = leads[columnId] || [];
    const total = columnLeads.reduce((sum, lead) => sum + (lead.value || 0), 0);
    return total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
  };

  const handleEditFunnel = () => {
    setTempFunnelName(funnelName);
    setEditingFunnel(true);
  };

  const handleSaveFunnel = () => {
    if (tempFunnelName.trim()) {
      setFunnels(prev => prev.map(funnel => 
        funnel.id === currentFunnelId 
          ? { ...funnel, name: tempFunnelName.trim() }
          : funnel
      ));
    }
    setEditingFunnel(false);
    setTempFunnelName('');
  };

  const handleCancelEditFunnel = () => {
    setEditingFunnel(false);
    setTempFunnelName('');
  };

  const handleDeleteFunnel = () => {
    if (funnels.length === 1) {
      alert('Não é possível excluir o último funil. Crie outro funil antes de excluir este.');
      return;
    }
    
    if (window.confirm('Tem certeza que deseja excluir este funil? Todos os dados serão perdidos.')) {
      setFunnels(prev => prev.filter(funnel => funnel.id !== currentFunnelId));
      // Seleciona o primeiro funil disponível
      const remainingFunnels = funnels.filter(f => f.id !== currentFunnelId);
      if (remainingFunnels.length > 0) {
        setCurrentFunnelId(remainingFunnels[0].id);
      }
    }
  };

  const handleCreateColumn = () => {
    setCreatingColumn(true);
    setNewColumnForm({ name: '', color: 'bg-blue-50', shouldSum: false, showCount: true, fontSize: 'text-sm' });
  };

  const handleSaveNewColumn = () => {
    if (newColumnForm.name.trim()) {
      const newColumnId = newColumnForm.name.toLowerCase().replace(/\s+/g, '');
      
      const newColumn = {
        id: newColumnId,
        name: newColumnForm.name.trim(),
        color: newColumnForm.color,
        textColor: colorOptions.find(c => c.bg === newColumnForm.color)?.text || 'text-gray-800',
        borderColor: colorOptions.find(c => c.bg === newColumnForm.color)?.border || 'border-gray-300',
        shouldSum: newColumnForm.shouldSum,
        showCount: newColumnForm.showCount,
        fontSize: newColumnForm.fontSize
      };

      setColumns(prev => [...prev, newColumn]);
      setLeads(prev => ({ ...prev, [newColumnId]: [] }));
      setCreatingColumn(false);
      setNewColumnForm({ name: '', color: 'bg-blue-50', shouldSum: false, showCount: true, fontSize: 'text-sm' });
    }
  };

  const handleCancelNewColumn = () => {
    setCreatingColumn(false);
    setNewColumnForm({ name: '', color: 'bg-blue-50', shouldSum: false, showCount: true, fontSize: 'text-sm' });
  };

  // FUNÇÕES PARA GERENCIAMENTO DE FUNIS PERSONALIZADOS
  const handleCreateFunnel = () => {
    setCreatingFunnel(true);
    setNewFunnelForm({ name: '', columns: [] });
  };

  const handleAddColumnToNewFunnel = () => {
    setAddingColumnToNewFunnel(true);
    setNewFunnelColumnForm({
      name: '',
      color: 'bg-blue-50',
      shouldSum: false,
      showCount: true,
      fontSize: 'text-sm'
    });
  };

  const handleSaveColumnToNewFunnel = () => {
    if (newFunnelColumnForm.name.trim()) {
      const newColumn = {
        id: newFunnelColumnForm.name.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '') + '_' + Date.now(),
        name: newFunnelColumnForm.name.trim(),
        color: newFunnelColumnForm.color,
        textColor: colorOptions.find(c => c.bg === newFunnelColumnForm.color)?.text || 'text-gray-800',
        borderColor: colorOptions.find(c => c.bg === newFunnelColumnForm.color)?.border || 'border-gray-300',
        shouldSum: newFunnelColumnForm.shouldSum,
        showCount: newFunnelColumnForm.showCount,
        fontSize: newFunnelColumnForm.fontSize
      };

      setNewFunnelForm(prev => ({
        ...prev,
        columns: [...prev.columns, newColumn]
      }));
      
      setAddingColumnToNewFunnel(false);
      setNewFunnelColumnForm({
        name: '',
        color: 'bg-blue-50',
        shouldSum: false,
        showCount: true,
        fontSize: 'text-sm'
      });
    }
  };

  const handleCancelColumnToNewFunnel = () => {
    setAddingColumnToNewFunnel(false);
    setNewFunnelColumnForm({
      name: '',
      color: 'bg-blue-50',
      shouldSum: false,
      showCount: true,
      fontSize: 'text-sm'
    });
  };

  const handleRemoveColumnFromNewFunnel = (columnIndex) => {
    setNewFunnelForm(prev => ({
      ...prev,
      columns: prev.columns.filter((_, index) => index !== columnIndex)
    }));
  };

  const handleSaveNewFunnel = () => {
    console.log('🎯 TENTANDO CRIAR FUNIL:', {
      name: newFunnelForm.name,
      nameLength: newFunnelForm.name.trim().length,
      columnsCount: newFunnelForm.columns.length,
      columns: newFunnelForm.columns
    });

    if (newFunnelForm.name.trim() && newFunnelForm.columns.length > 0) {
      const newFunnelId = newFunnelForm.name.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '') + '_' + Date.now();
      
      console.log('✅ VALIDAÇÃO PASSOU, CRIANDO FUNIL:', newFunnelId);
      
      const newFunnel = {
        id: newFunnelId,
        name: newFunnelForm.name.trim(),
        columns: newFunnelForm.columns,
        leads: {}
      };
      
      // Inicializa leads vazios para cada coluna
      newFunnelForm.columns.forEach(col => {
        newFunnel.leads[col.id] = [];
        console.log('📊 INICIALIZANDO COLUNA:', col.id, col.name);
      });
      
      console.log('🏗️ FUNIL CRIADO:', newFunnel);
      
      setFunnels(prev => {
        const newFunnels = [...prev, newFunnel];
        console.log('📋 LISTA ATUALIZADA DE FUNIS:', newFunnels.map(f => f.name));
        return newFunnels;
      });
      
      setCurrentFunnelId(newFunnelId);
      setCreatingFunnel(false);
      setNewFunnelForm({ name: '', columns: [] });
      
      // NOTIFICAÇÃO DE FUNIL CRIADO
      addNotification(
        'funnel',
        'Novo funil criado com sucesso!',
        `"${newFunnel.name}" foi criado com ${newFunnel.columns.length} colunas`,
        '🆕',
        () => setCurrentPage('crm'),
        'Ver Funil'
      );
      
      console.log('🎉 FUNIL CRIADO COM SUCESSO!');
    } else {
      console.log('❌ VALIDAÇÃO FALHOU:', {
        hasName: !!newFunnelForm.name.trim(),
        hasColumns: newFunnelForm.columns.length > 0,
        name: newFunnelForm.name,
        columnsCount: newFunnelForm.columns.length
      });
    }
  };

  const handleCancelNewFunnel = () => {
    setCreatingFunnel(false);
    setNewFunnelForm({ name: '', columns: [] });
  };

  // FUNÇÕES PARA CONFIGURAÇÃO DE CARDS
  const handleEditCard = (lead, columnId) => {
    setEditingCard({ leadId: lead.id, columnId });
    setCardEditForm({
      name: lead.name,
      phone: lead.phone,
      source: lead.source,
      value: lead.value || 0,
      color: lead.color,
      avatar: lead.avatar,
      notes: lead.notes || '',
      sexo: lead.sexo || '',
      idade: lead.idade || null
    });
  };

  // FUNÇÕES PARA NAVEGAÇÃO
  const handleViewCompleteProfile = (lead) => {
    setViewingClientId(lead.id);
    setCurrentPage('clientes');
  };

  const handleBackToDashboard = () => {
    setCurrentPage('dashboard');
    setViewingClientId(null);
  };

  const handleSaveCard = () => {
    if (cardEditForm.name.trim() && editingCard) {
      setLeads(prevLeads => {
        const newLeads = { ...prevLeads };
        const columnLeads = [...(newLeads[editingCard.columnId] || [])];
        
        const leadIndex = columnLeads.findIndex(l => l.id === editingCard.leadId);
        if (leadIndex !== -1) {
          columnLeads[leadIndex] = {
            ...columnLeads[leadIndex],
            name: cardEditForm.name.trim(),
            phone: cardEditForm.phone.trim(),
            source: cardEditForm.source.trim(),
            value: parseFloat(cardEditForm.value) || 0,
            color: cardEditForm.color,
            avatar: cardEditForm.avatar.trim() || cardEditForm.name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase(),
            notes: cardEditForm.notes.trim(),
            sexo: cardEditForm.sexo,
            idade: cardEditForm.idade,
            // Dados expandidos para ficha completa
            email: columnLeads[leadIndex].email || '',
            empresa: columnLeads[leadIndex].empresa || '',
            cargo: columnLeads[leadIndex].cargo || '',
            endereco: columnLeads[leadIndex].endereco || '',
            observacoes: columnLeads[leadIndex].observacoes || '',
            historico: columnLeads[leadIndex].historico || [],
            documentos: columnLeads[leadIndex].documentos || [],
            tags: columnLeads[leadIndex].tags || [],
            status: columnLeads[leadIndex].status || 'Ativo',
            dataContato: columnLeads[leadIndex].dataContato || new Date().toISOString(),
            proximoContato: columnLeads[leadIndex].proximoContato || '',
            origem_detalhes: columnLeads[leadIndex].origem_detalhes || ''
          };
          
          newLeads[editingCard.columnId] = columnLeads;
        }
        
        return newLeads;
      });
      
      setEditingCard(null);
      setCardEditForm({
        name: '',
        phone: '',
        source: '',
        value: 0,
        color: '',
        avatar: '',
        notes: ''
      });
    }
  };

  const handleCancelCardEdit = () => {
    setEditingCard(null);
    setCardEditForm({
      name: '',
      phone: '',
      source: '',
      value: 0,
      color: '',
      avatar: '',
      notes: '',
      sexo: '',
      idade: null,
      sexo: '',
      idade: null
    });
  };

  const handleDeleteCard = (leadId, columnId) => {
    if (window.confirm('Tem certeza que deseja excluir este lead?')) {
      setLeads(prevLeads => {
        const newLeads = { ...prevLeads };
        newLeads[columnId] = (newLeads[columnId] || []).filter(l => l.id !== leadId);
        return newLeads;
      });
    }
  };

  // NOVA IMPLEMENTAÇÃO DRAG AND DROP COM VISUAL MELHORADO
  const handleMouseDown = (e, lead, sourceColumn) => {
    console.log('🖱️ MOUSE DOWN:', lead.name, 'from', sourceColumn);
    e.preventDefault();
    
    setIsDragging(true);
    setDraggedItem({ lead, sourceColumn });
    dragItemRef.current = { lead, sourceColumn };
    
    // Posição inicial do drag
    const rect = e.currentTarget.getBoundingClientRect();
    setDragPosition({
      x: e.clientX - rect.width / 2,
      y: e.clientY - rect.height / 2
    });
    
    // Visual feedback no card original
    e.currentTarget.style.opacity = '0.3';
    e.currentTarget.style.transform = 'scale(0.9)';
    e.currentTarget.style.filter = 'blur(1px)';
    
    // Adiciona listeners globais
    const handleMouseMove = (e) => {
      e.preventDefault();
      
      // Atualiza posição do card fantasma
      setDragPosition({
        x: e.clientX - 150, // Metade da largura do card
        y: e.clientY - 50   // Metade da altura do card
      });
      
      // Encontra o elemento sob o cursor
      const elementBelow = document.elementFromPoint(e.clientX, e.clientY);
      const columnElement = elementBelow?.closest('[data-column-id]');
      
      if (columnElement) {
        const columnId = columnElement.getAttribute('data-column-id');
        setDropTarget(columnId);
      } else {
        setDropTarget(null);
      }
    };
    
    const handleMouseUp = (e) => {
      console.log('🖱️ MOUSE UP');
      
      // Remove visual feedback
      document.querySelectorAll('[data-lead-card]').forEach(card => {
        card.style.opacity = '1';
        card.style.transform = 'scale(1)';
        card.style.filter = 'none';
      });
      
      // Encontra coluna de destino
      const elementBelow = document.elementFromPoint(e.clientX, e.clientY);
      const columnElement = elementBelow?.closest('[data-column-id]');
      
      if (columnElement && dragItemRef.current) {
        const targetColumn = columnElement.getAttribute('data-column-id');
        const { lead, sourceColumn } = dragItemRef.current;
        
        console.log('🎯 DROP:', lead.name, sourceColumn, '→', targetColumn);
        
        if (sourceColumn !== targetColumn) {
          // Move o lead
          setLeads(prevLeads => {
            const newLeads = { ...prevLeads };
            
            // Remove da origem
            newLeads[sourceColumn] = newLeads[sourceColumn].filter(l => l.id !== lead.id);
            
            // Adiciona no destino
            if (!newLeads[targetColumn]) {
              newLeads[targetColumn] = [];
            }
            newLeads[targetColumn] = [...newLeads[targetColumn], lead];
            
            console.log('✅ SUCESSO! Lead movido de', sourceColumn, 'para', targetColumn);
            
            // GERAR NOTIFICAÇÃO AUTOMÁTICA DE MOVIMENTAÇÃO
            const sourceColumnName = columns.find(col => col.id === sourceColumn)?.name || sourceColumn;
            const targetColumnName = columns.find(col => col.id === targetColumn)?.name || targetColumn;
            
            // Verificar se é uma conversão importante (para vendas/fechamento)
            const isConversion = targetColumnName.toLowerCase().includes('venda') || 
                               targetColumnName.toLowerCase().includes('fechad') ||
                               targetColumnName.toLowerCase().includes('concluíd');
            
            if (isConversion) {
              addNotification(
                'conversion',
                'Nova conversão realizada! 🎉',
                `${lead.name} converteu: ${sourceColumnName} → ${targetColumnName}${lead.value ? ` (${lead.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })})` : ''}`,
                '💰',
                () => {
                  setCurrentPage('clientes');
                  setViewingClientId(lead.id);
                },
                'Ver Cliente'
              );
            } else {
              addNotification(
                'info',
                'Lead progrediu no funil',
                `${lead.name}: ${sourceColumnName} → ${targetColumnName}${lead.value ? ` (${lead.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })})` : ''}`,
                '📈',
                () => setCurrentPage('crm'),
                'Ver no CRM'
              );
            }
            
            return newLeads;
          });
        }
      }
      
      // Limpa estados
      setIsDragging(false);
      setDraggedItem(null);
      setDropTarget(null);
      setDragPosition({ x: 0, y: 0 });
      dragItemRef.current = null;
      
      // Remove listeners
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
    
    // Adiciona listeners globais
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  // DRAG AND DROP DE COLUNAS
  const handleColumnMouseDown = (e, column) => {
    // Só permite arrastar se clicar no header da coluna (não nos cards)
    if (e.target.closest('[data-lead-card]')) return;
    if (e.target.closest('button')) return;
    
    console.log('🏗️ COLUMN DRAG START:', column.name);
    e.preventDefault();
    
    setIsDraggingColumn(true);
    setDraggedColumn(column);
    dragColumnRef.current = column;
    
    // Posição inicial do drag
    const rect = e.currentTarget.getBoundingClientRect();
    setColumnDragPosition({
      x: e.clientX - rect.width / 2,
      y: e.clientY - 100
    });
    
    // Visual feedback na coluna original
    e.currentTarget.style.opacity = '0.5';
    e.currentTarget.style.transform = 'scale(0.95)';
    
    const handleColumnMouseMove = (e) => {
      e.preventDefault();
      
      // Atualiza posição do ghost da coluna
      setColumnDragPosition({
        x: e.clientX - 160, // Metade da largura da coluna
        y: e.clientY - 100
      });
      
      // Encontra a coluna sob o cursor
      const elementBelow = document.elementFromPoint(e.clientX, e.clientY);
      const columnElement = elementBelow?.closest('[data-column-container]');
      
      if (columnElement && dragColumnRef.current) {
        const targetColumnId = columnElement.getAttribute('data-column-id');
        if (targetColumnId !== dragColumnRef.current.id) {
          setColumnDropTarget(targetColumnId);
        } else {
          setColumnDropTarget(null);
        }
      } else {
        setColumnDropTarget(null);
      }
    };
    
    const handleColumnMouseUp = (e) => {
      console.log('🏗️ COLUMN DRAG END');
      
      // Remove visual feedback
      document.querySelectorAll('[data-column-container]').forEach(col => {
        col.style.opacity = '1';
        col.style.transform = 'scale(1)';
      });
      
      // Encontra coluna de destino
      const elementBelow = document.elementFromPoint(e.clientX, e.clientY);
      const columnElement = elementBelow?.closest('[data-column-container]');
      
      if (columnElement && dragColumnRef.current) {
        const targetColumnId = columnElement.getAttribute('data-column-id');
        const sourceColumn = dragColumnRef.current;
        
        if (targetColumnId && targetColumnId !== sourceColumn.id) {
          console.log('🎯 COLUMN DROP:', sourceColumn.name, '→', targetColumnId);
          
          // Reordena as colunas
          setColumns(prevColumns => {
            const newColumns = [...prevColumns];
            const sourceIndex = newColumns.findIndex(col => col.id === sourceColumn.id);
            const targetIndex = newColumns.findIndex(col => col.id === targetColumnId);
            
            if (sourceIndex !== -1 && targetIndex !== -1) {
              // Remove a coluna da posição original
              const [removedColumn] = newColumns.splice(sourceIndex, 1);
              // Insere na nova posição
              newColumns.splice(targetIndex, 0, removedColumn);
            }
            
            return newColumns;
          });
        }
      }
      
      // Limpa estados
      setIsDraggingColumn(false);
      setDraggedColumn(null);
      setColumnDropTarget(null);
      setColumnDragPosition({ x: 0, y: 0 });
      dragColumnRef.current = null;
      
      // Remove listeners
      document.removeEventListener('mousemove', handleColumnMouseMove);
      document.removeEventListener('mouseup', handleColumnMouseUp);
    };
    
    // Adiciona listeners globais
    document.addEventListener('mousemove', handleColumnMouseMove);
    document.addEventListener('mouseup', handleColumnMouseUp);
  };

  const LeadCard = ({ lead, columnId, isGhost = false }) => {
    return (
      <div 
        data-lead-card="true"
        onMouseDown={!isGhost ? (e) => handleMouseDown(e, lead, columnId) : undefined}
        className={`bg-white rounded-lg shadow-sm border border-gray-100 select-none transition-all duration-200 p-3 mb-2 relative ${
          isGhost 
            ? 'cursor-default shadow-xl border-blue-300 scale-105 opacity-95' 
            : 'cursor-grab active:cursor-grabbing hover:shadow-lg hover:scale-[1.02]'
        }`}
        style={{ 
          userSelect: 'none',
          WebkitUserSelect: 'none',
          MozUserSelect: 'none',
          msUserSelect: 'none'
        }}
      >
        {/* Nome do Lead com Avatar */}
        <div className="flex items-center mb-3">
          <div className={`w-8 h-8 rounded-full ${lead.color} flex items-center justify-center text-white text-xs font-bold mr-3 flex-shrink-0`}>
            {lead.avatar}
          </div>
          <h4 className="font-semibold text-gray-800 text-sm truncate">
            {lead.name}
          </h4>
        </div>

        {/* Telefone */}
        <div className="mb-3">
          <p className="text-sm text-gray-600 flex items-center">
            <svg className="w-4 h-4 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
            </svg>
            {lead.phone}
          </p>
        </div>

        {/* Origem */}
        <div className="mb-1">
          <div className="flex items-center">
            {getSourceIcon(lead.source)}
            <span className="text-sm text-gray-600 ml-2">
              {lead.source}
            </span>
          </div>
        </div>

        {/* Botões de Ação - Canto superior direito */}
        <div className="absolute top-2 right-2 flex space-x-1">
          <button
            onMouseDown={!isGhost ? (e) => {
              e.stopPropagation();
              handleEditCard(lead, columnId);
            } : undefined}
            className="w-6 h-6 flex items-center justify-center text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded transition-colors"
            title="Editar lead"
          >
            <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
              <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
            </svg>
          </button>
          <button
            onMouseDown={!isGhost ? (e) => {
              e.stopPropagation();
              handleDeleteCard(lead.id, columnId);
            } : undefined}
            className="w-6 h-6 flex items-center justify-center text-gray-400 hover:text-red-600 hover:bg-red-50 rounded transition-colors"
            title="Excluir lead"
          >
            <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
              <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
            </svg>
          </button>
        </div>
      </div>
    );
  };

  const Column = ({ column, leads: columnLeads, count }) => (
    <div 
      data-column-container="true"
      data-column-id={column.id}
      onMouseDown={(e) => handleColumnMouseDown(e, column)}
      className={`${column.color} ${column.borderColor} border-2 rounded-lg p-4 min-h-96 relative shadow-sm transition-all duration-300 cursor-move ${
        dropTarget === column.id && isDragging 
          ? 'border-4 border-blue-500 bg-blue-100 shadow-xl scale-102 ring-2 ring-blue-200' 
          : ''
      } ${
        columnDropTarget === column.id && isDraggingColumn
          ? 'border-4 border-purple-500 bg-purple-100 shadow-xl scale-105 ring-2 ring-purple-200'
          : ''
      }`}
    >
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center space-x-2 flex-1">
          <svg className="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
            <path d="M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
          </svg>
          <h3 className={`font-semibold ${column.textColor} ${column.fontSize || 'text-sm'} select-none`}>{column.name}</h3>
        </div>
        <div className="relative">
          <button 
            onClick={(e) => {
              e.stopPropagation();
              setOpenDropdown(openDropdown === column.id ? null : column.id);
            }}
            onMouseDown={(e) => e.stopPropagation()}
            className="w-6 h-6 flex items-center justify-center text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded cursor-pointer"
          >
            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
            </svg>
          </button>
          
          {openDropdown === column.id && (
            <div className="absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg z-20 w-40">
              <button 
                onClick={(e) => {
                  e.stopPropagation();
                  handleEditColumn(column);
                }}
                className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                </svg>
                Editar coluna
              </button>
              <button 
                onClick={(e) => {
                  e.stopPropagation();
                  handleDeleteColumn(column.id);
                }}
                className="w-full text-left px-3 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                </svg>
                Excluir coluna
              </button>
              <div className="border-t border-gray-200 my-1"></div>
              <div className="px-3 py-2 text-xs text-gray-500 flex items-center">
                <svg className="w-3 h-3 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                </svg>
                Arraste para reordenar
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="mb-2">
        {column.showCount && (
          <span className={`text-xs ${column.textColor} font-medium`}>{count} leads</span>
        )}
        {column.shouldSum && (
          <div className={`text-sm ${column.textColor} font-bold mt-0.5`}>
            {calculateColumnTotal(column.id, column.shouldSum)}
          </div>
        )}
      </div>
      
      <hr className="border-gray-300 mb-3" />
      
      <div className="space-y-2">
        {columnLeads.map(lead => (
          <LeadCard key={lead.id} lead={lead} columnId={column.id} />
        ))}
      </div>
    </div>
  );

  const NewFunnelModal = () => {
    if (!creatingFunnel) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-[60] p-4">
        <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-green-600 to-teal-600 px-6 py-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-xl font-bold">Criar Novo Funil Personalizado</h3>
                <p className="text-green-100 text-sm mt-1">
                  Configure seu funil do zero, adicionando as colunas que você precisar
                </p>
              </div>
              <button
                onClick={handleCancelNewFunnel}
                className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              
              {/* Configurações do Funil */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Configuração Básica
                  </h4>
                  
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Nome do Funil *
                    </label>
                    <input
                      type="text"
                      value={newFunnelForm.name}
                      onChange={(e) => setNewFunnelForm(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                      placeholder="Ex: Funil de Vendas B2B, Processo de Contratação..."
                      autoFocus
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Escolha um nome que represente bem o propósito deste funil
                    </p>
                  </div>

                  <div className="mb-6">
                    <div className="flex items-center justify-between mb-3">
                      <label className="block text-sm font-medium text-gray-700">
                        Colunas do Funil ({newFunnelForm.columns.length})
                      </label>
                      <button
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          console.log('🖱️ BOTÃO ADICIONAR COLUNA CLICADO');
                          handleAddColumnToNewFunnel();
                        }}
                        className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1.5 rounded-lg text-xs font-medium flex items-center"
                      >
                        <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        Adicionar Coluna
                      </button>
                    </div>

                    {newFunnelForm.columns.length === 0 ? (
                      <div className="bg-gray-50 rounded-lg p-6 text-center border-2 border-dashed border-gray-300">
                        <svg className="w-12 h-12 text-gray-400 mx-auto mb-3" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
                        </svg>
                        <p className="text-gray-500 text-sm mb-2">Nenhuma coluna adicionada ainda</p>
                        <p className="text-gray-400 text-xs">
                          Clique em "Adicionar Coluna" para criar as etapas do seu funil
                        </p>
                      </div>
                    ) : (
                      <div className="space-y-3 max-h-60 overflow-y-auto">
                        {newFunnelForm.columns.map((column, index) => (
                          <div key={index} className={`${column.color} ${column.borderColor} border-2 rounded-lg p-3 flex items-center justify-between`}>
                            <div className="flex items-center space-x-3">
                              <div className="w-2 h-8 bg-gray-400 rounded-full"></div>
                              <div>
                                <h5 className={`font-semibold ${column.textColor} text-sm`}>
                                  {column.name}
                                </h5>
                                <div className="flex items-center space-x-2 mt-1">
                                  {column.showCount && (
                                    <span className={`text-xs ${column.textColor} opacity-70`}>
                                      📊 Contador
                                    </span>
                                  )}
                                  {column.shouldSum && (
                                    <span className={`text-xs ${column.textColor} opacity-70`}>
                                      💰 Soma valores
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>
                            <button
                              onClick={() => handleRemoveColumnFromNewFunnel(index)}
                              className="w-6 h-6 flex items-center justify-center text-red-500 hover:bg-red-100 rounded-full transition-colors"
                              title="Remover coluna"
                            >
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                              </svg>
                            </button>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    <p className="text-xs text-gray-500 mt-2">
                      Adicione pelo menos uma coluna para criar seu funil
                    </p>
                  </div>
                </div>
              </div>

              {/* Preview do Funil */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                    </svg>
                    Preview: {newFunnelForm.name || 'Novo Funil'}
                  </h4>
                  
                  <div className="bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto">
                    {newFunnelForm.columns.length === 0 ? (
                      <div className="text-center py-8">
                        <div className="text-gray-400 text-sm">
                          Seu funil aparecerá aqui conforme você adiciona colunas
                        </div>
                      </div>
                    ) : (
                      <div className="flex gap-3 overflow-x-auto pb-2">
                        {newFunnelForm.columns.map((column, index) => (
                          <div key={index} className={`${column.color} ${column.borderColor} border-2 rounded-lg p-3 min-w-48 flex-shrink-0`}>
                            <div className="flex items-center justify-between mb-2">
                              <h5 className={`font-semibold ${column.textColor} ${column.fontSize}`}>
                                {column.name}
                              </h5>
                            </div>
                            <div className="mb-2">
                              {column.showCount && (
                                <span className={`text-xs ${column.textColor} font-medium`}>
                                  0 leads
                                </span>
                              )}
                              {column.shouldSum && (
                                <div className={`text-sm ${column.textColor} font-bold ${column.showCount ? 'mt-0.5' : ''}`}>
                                  R$ 0,00
                                </div>
                              )}
                            </div>
                            <hr className="border-gray-300 mb-2" />
                            <div className="text-xs text-gray-500 text-center py-2">
                              Vazio
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                {/* Dicas */}
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-yellow-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                    Dicas para Criar Seu Funil
                  </h4>
                  
                  <div className="bg-yellow-50 rounded-lg p-4 space-y-3">
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Sequência Lógica</p>
                        <p className="text-xs text-gray-600">Organize as colunas na ordem que seus leads normalmente progridem</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Nomes Claros</p>
                        <p className="text-xs text-gray-600">Use nomes que deixem claro o status do lead em cada etapa</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Cores Distintas</p>
                        <p className="text-xs text-gray-600">Escolha cores diferentes para facilitar a visualização do progresso</p>
                      </div>
                    </div>

                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Comece Simples</p>
                        <p className="text-xs text-gray-600">Você pode adicionar mais colunas depois, no funil já criado</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="bg-gray-50 px-6 py-4 flex justify-between items-center">
            <div className="text-sm text-gray-500">
              * Nome obrigatório • Mínimo 1 coluna • Você pode editar depois
              {/* Debug Info */}
              <div className="text-xs mt-1 opacity-70">
                Debug: Nome="{newFunnelForm.name}" | Colunas={newFunnelForm.columns.length} | 
                Válido={newFunnelForm.name.trim() && newFunnelForm.columns.length > 0 ? 'SIM' : 'NÃO'}
              </div>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={handleCancelNewFunnel}
                className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('🖱️ BOTÃO CRIAR FUNIL CLICADO');
                  handleSaveNewFunnel();
                }}
                disabled={!newFunnelForm.name.trim() || newFunnelForm.columns.length === 0}
                className={`px-6 py-2 text-sm font-medium text-white rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl ${
                  newFunnelForm.name.trim() && newFunnelForm.columns.length > 0
                    ? 'bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700' 
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                Criar Funil ({newFunnelForm.columns.length} colunas)
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Modal para adicionar coluna ao novo funil
  const AddColumnToNewFunnelModal = () => {
    if (!addingColumnToNewFunnel) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-[70] p-4">
        <div className="bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-xl font-bold">Adicionar Nova Coluna</h3>
                <p className="text-blue-100 text-sm mt-1">
                  Configure uma nova etapa para seu funil personalizado
                </p>
              </div>
              <button
                onClick={handleCancelColumnToNewFunnel}
                className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              
              {/* Configurações da Coluna */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Configuração da Nova Coluna
                  </h4>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Nome da Coluna *
                    </label>
                    <input
                      type="text"
                      value={newFunnelColumnForm.name}
                      onChange={(e) => setNewFunnelColumnForm(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                      placeholder="Ex: Contato Inicial, Proposta Enviada..."
                      autoFocus
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Escolha um nome que represente bem esta etapa
                    </p>
                  </div>

                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      Cor da Coluna
                    </label>
                    <div className="grid grid-cols-5 gap-3">
                      {colorOptions.map((colorOption, index) => (
                        <button
                          key={index}
                          onClick={() => setNewFunnelColumnForm(prev => ({ ...prev, color: colorOption.bg }))}
                          className={`relative w-14 h-14 rounded-xl border-3 ${colorOption.bg} ${
                            newFunnelColumnForm.color === colorOption.bg 
                              ? 'border-gray-800 ring-2 ring-blue-500 ring-offset-2' 
                              : 'border-gray-300 hover:border-gray-500'
                          } transition-all duration-200 transform hover:scale-105`}
                          title={colorOption.name}
                        >
                          {newFunnelColumnForm.color === colorOption.bg && (
                            <div className="absolute inset-0 flex items-center justify-center">
                              <svg className="w-6 h-6 text-gray-800" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                            </div>
                          )}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div className="mb-4 space-y-4">
                    <label className="flex items-start space-x-3 cursor-pointer group">
                      <input
                        type="checkbox"
                        checked={newFunnelColumnForm.shouldSum}
                        onChange={(e) => setNewFunnelColumnForm(prev => ({ ...prev, shouldSum: e.target.checked }))}
                        className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500 w-4 h-4"
                      />
                      <div>
                        <span className="text-sm font-medium text-gray-700 group-hover:text-blue-600 transition-colors">
                          Calcular total financeiro
                        </span>
                        <p className="text-xs text-gray-500 mt-1">
                          Soma automaticamente os valores dos leads nesta coluna
                        </p>
                      </div>
                    </label>

                    <label className="flex items-start space-x-3 cursor-pointer group">
                      <input
                        type="checkbox"
                        checked={newFunnelColumnForm.showCount}
                        onChange={(e) => setNewFunnelColumnForm(prev => ({ ...prev, showCount: e.target.checked }))}
                        className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500 w-4 h-4"
                      />
                      <div>
                        <span className="text-sm font-medium text-gray-700 group-hover:text-blue-600 transition-colors">
                          Exibir quantidade de leads
                        </span>
                        <p className="text-xs text-gray-500 mt-1">
                          Mostra o número total de leads nesta coluna
                        </p>
                      </div>
                    </label>
                  </div>

                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      Tamanho da Fonte do Título
                    </label>
                    <div className="grid grid-cols-4 gap-2">
                      {[
                        { value: 'text-xs', label: 'Pequeno', preview: 'Aa' },
                        { value: 'text-sm', label: 'Normal', preview: 'Aa' },
                        { value: 'text-base', label: 'Médio', preview: 'Aa' },
                        { value: 'text-lg', label: 'Grande', preview: 'Aa' }
                      ].map((size) => (
                        <button
                          key={size.value}
                          onClick={() => setNewFunnelColumnForm(prev => ({ ...prev, fontSize: size.value }))}
                          className={`p-3 rounded-lg border-2 transition-all duration-200 hover:scale-105 ${
                            newFunnelColumnForm.fontSize === size.value
                              ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200'
                              : 'border-gray-300 hover:border-gray-400'
                          }`}
                        >
                          <div className={`${size.value} font-semibold text-gray-800 mb-1`}>
                            {size.preview}
                          </div>
                          <div className="text-xs text-gray-600">
                            {size.label}
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* Preview */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                    </svg>
                    Preview da Nova Coluna
                  </h4>
                  
                  <div className="border rounded-lg p-3">
                    <div className={`${newFunnelColumnForm.color} ${colorOptions.find(c => c.bg === newFunnelColumnForm.color)?.border || 'border-gray-300'} border-2 rounded-lg p-3`}>
                      <div className="flex items-center justify-between mb-2">
                        <h3 className={`font-semibold ${colorOptions.find(c => c.bg === newFunnelColumnForm.color)?.text || 'text-gray-800'} ${newFunnelColumnForm.fontSize}`}>
                          {newFunnelColumnForm.name || 'Nome da Nova Coluna'}
                        </h3>
                      </div>
                      
                      <div className="mb-2">
                        {newFunnelColumnForm.showCount && (
                          <span className={`text-xs ${colorOptions.find(c => c.bg === newFunnelColumnForm.color)?.text || 'text-gray-800'} font-medium`}>
                            0 leads
                          </span>
                        )}
                        {newFunnelColumnForm.shouldSum && (
                          <div className={`text-sm ${colorOptions.find(c => c.bg === newFunnelColumnForm.color)?.text || 'text-gray-800'} font-bold ${newFunnelColumnForm.showCount ? 'mt-0.5' : ''}`}>
                            R$ 0,00
                          </div>
                        )}
                      </div>
                      
                      <hr className="border-gray-300 mb-2" />
                      
                      <div className="text-xs text-gray-500 text-center py-4 border-2 border-dashed border-gray-300 rounded">
                        A nova coluna aparecerá aqui
                      </div>
                    </div>
                  </div>
                </div>

                {/* Posição no Funil */}
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-purple-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
                    </svg>
                    Posição no Funil
                  </h4>
                  
                  <div className="bg-purple-50 rounded-lg p-4">
                    <p className="text-sm text-gray-700 mb-2">
                      <span className="font-medium">Posição:</span> No final do funil (posição {newFunnelForm.columns.length + 1})
                    </p>
                    <p className="text-xs text-gray-600 mb-3">
                      A nova coluna será adicionada como a última etapa do seu funil. Você pode reordenar depois usando drag & drop.
                    </p>
                    
                    <div className="text-xs text-gray-500">
                      <strong>Sequência atual:</strong>
                      {newFunnelForm.columns.length === 0 ? (
                        <span className="ml-1 italic">Nenhuma coluna ainda</span>
                      ) : (
                        <div className="mt-1 space-y-1">
                          {newFunnelForm.columns.map((col, idx) => (
                            <div key={idx} className="flex items-center">
                              <span className="w-4 text-center">{idx + 1}.</span>
                              <span className="ml-2">{col.name}</span>
                            </div>
                          ))}
                          <div className="flex items-center font-medium text-purple-600">
                            <span className="w-4 text-center">{newFunnelForm.columns.length + 1}.</span>
                            <span className="ml-2">{newFunnelColumnForm.name || 'Nova Coluna'}</span>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="bg-gray-50 px-6 py-4 flex justify-between items-center">
            <div className="text-sm text-gray-500">
              * Nome obrigatório • Será adicionada ao final do funil
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={handleCancelColumnToNewFunnel}
                className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleSaveColumnToNewFunnel}
                disabled={!newFunnelColumnForm.name.trim()}
                className={`px-6 py-2 text-sm font-medium text-white rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl ${
                  newFunnelColumnForm.name.trim() 
                    ? 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700' 
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                Adicionar Coluna
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Modal para editar configurações do card
  const EditCardModal = () => {
    if (!editingCard) return null;

    const avatarColors = [
      'bg-pink-500', 'bg-blue-500', 'bg-green-500', 'bg-orange-500', 'bg-red-500',
      'bg-purple-500', 'bg-yellow-500', 'bg-indigo-500', 'bg-teal-500', 'bg-gray-500'
    ];

    const sourceOptions = [
      'Google', 'LinkedIn', 'Instagram', 'Facebook', 'WhatsApp', 'Website', 
      'Indicação', 'Parcerias', 'Telefone', 'Email', 'Outros'
    ];

    return (
      <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-xl font-bold">Configurar Lead</h3>
                <p className="text-blue-100 text-sm mt-1">
                  Personalize informações e aparência do card do lead
                </p>
              </div>
              <button
                onClick={handleCancelCardEdit}
                className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              
              {/* Informações Básicas */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                    </svg>
                    Informações do Lead
                  </h4>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nome *
                      </label>
                      <input
                        type="text"
                        value={cardEditForm.name}
                        onChange={(e) => setCardEditForm(prev => ({ ...prev, name: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        placeholder="Nome completo do lead"
                        autoFocus
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Telefone
                      </label>
                      <input
                        type="text"
                        value={cardEditForm.phone}
                        onChange={(e) => setCardEditForm(prev => ({ ...prev, phone: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        placeholder="(11) 99999-9999"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Origem/Fonte
                      </label>
                      <select
                        value={cardEditForm.source}
                        onChange={(e) => setCardEditForm(prev => ({ ...prev, source: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                      >
                        <option value="">Selecione uma fonte</option>
                        {sourceOptions.map(source => (
                          <option key={source} value={source}>{source}</option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Valor Potencial (R$)
                      </label>
                      <input
                        type="number"
                        value={cardEditForm.value}
                        onChange={(e) => setCardEditForm(prev => ({ ...prev, value: parseFloat(e.target.value) || 0 }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        placeholder="0.00"
                        min="0"
                        step="0.01"
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Sexo
                        </label>
                        <select
                          value={cardEditForm.sexo || ''}
                          onChange={(e) => setCardEditForm(prev => ({ ...prev, sexo: e.target.value }))}
                          className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        >
                          <option value="">Selecione</option>
                          <option value="Masculino">Masculino</option>
                          <option value="Feminino">Feminino</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Idade
                        </label>
                        <input
                          type="number"
                          value={cardEditForm.idade || ''}
                          onChange={(e) => setCardEditForm(prev => ({ ...prev, idade: parseInt(e.target.value) || null }))}
                          className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                          placeholder="Ex: 30"
                          min="18"
                          max="100"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Observações Rápidas
                      </label>
                      <textarea
                        value={cardEditForm.notes}
                        onChange={(e) => setCardEditForm(prev => ({ ...prev, notes: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        placeholder="Anotações rápidas sobre o lead..."
                        rows="3"
                        maxLength="100"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Máximo 100 caracteres para observações rápidas
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Preview do Card */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                    </svg>
                    Preview do Card
                  </h4>
                  
                  <div className="border rounded-lg p-4 bg-gray-50">
                    <div className="max-w-80">
                      <LeadCard 
                        lead={{
                          ...cardEditForm,
                          id: 'preview',
                          name: cardEditForm.name || 'Nome do Lead',
                          phone: cardEditForm.phone || '(11) 99999-9999',
                          source: cardEditForm.source || 'Google',
                          avatar: cardEditForm.avatar || (cardEditForm.name ? cardEditForm.name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase() : 'AB'),
                          color: cardEditForm.color || 'bg-blue-500'
                        }} 
                        columnId="preview" 
                        isGhost={true}
                      />
                    </div>
                  </div>
                </div>

                {/* Dicas */}
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-yellow-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                    Dicas de Configuração
                  </h4>
                  
                  <div className="bg-yellow-50 rounded-lg p-4 space-y-3">
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Cores Consistentes</p>
                        <p className="text-xs text-gray-600">Use cores diferentes para cada lead para facilitar identificação</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Informações Demográficas</p>
                        <p className="text-xs text-gray-600">Sexo e idade ajudam nas análises do dashboard</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Valor Potencial</p>
                        <p className="text-xs text-gray-600">Defina um valor para acompanhar o potencial de receita de cada lead</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="bg-gray-50 px-6 py-4 flex justify-between items-center">
            <div className="flex space-x-3">
              <button
                onClick={() => handleDeleteCard(editingCard.leadId, editingCard.columnId)}
                className="px-4 py-2 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 transition-colors flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                </svg>
                Excluir Lead
              </button>
              
              <button
                onClick={() => {
                  // Salva as alterações antes de ir para a ficha
                  handleSaveCard();
                  // Vai para a ficha completa
                  const currentLead = leads[editingCard.columnId]?.find(l => l.id === editingCard.leadId);
                  if (currentLead) {
                    handleViewCompleteProfile(currentLead);
                  }
                }}
                className="px-4 py-2 text-sm font-medium text-purple-600 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
                  <polyline points="14,2 14,8 20,8"/>
                  <line x1="16" y1="13" x2="8" y2="13"/>
                  <line x1="16" y1="17" x2="8" y2="17"/>
                  <polyline points="10,9 9,9 8,9"/>
                </svg>
                Ver Ficha Completa
              </button>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={handleCancelCardEdit}
                className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleSaveCard}
                disabled={!cardEditForm.name.trim()}
                className={`px-6 py-2 text-sm font-medium text-white rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl ${
                  cardEditForm.name.trim() 
                    ? 'bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700' 
                  
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                Salvar Alterações
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const NewColumnModal = () => {
    if (!creatingColumn) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 px-6 py-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-xl font-bold">Criar Nova Coluna</h3>
                <p className="text-purple-100 text-sm mt-1">
                  Configure uma nova etapa para seu funil de vendas
                </p>
              </div>
              <button
                onClick={handleCancelNewColumn}
                className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              
              {/* Configurações Básicas */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-purple-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Configurações da Nova Coluna
                  </h4>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Nome da Coluna *
                    </label>
                    <input
                      type="text"
                      value={newColumnForm.name}
                      onChange={(e) => setNewColumnForm(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                      placeholder="Ex: Qualificação, Follow-up, Proposta..."
                      autoFocus
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Escolha um nome que represente bem esta etapa do processo
                    </p>
                  </div>

                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      Tema da Coluna
                    </label>
                    <div className="grid grid-cols-5 gap-3">
                      {colorOptions.map((colorOption, index) => (
                        <button
                          key={index}
                          onClick={() => setNewColumnForm(prev => ({ ...prev, color: colorOption.bg }))}
                          className={`relative w-14 h-14 rounded-xl border-3 ${colorOption.bg} ${
                            newColumnForm.color === colorOption.bg 
                              ? 'border-gray-800 ring-2 ring-purple-500 ring-offset-2' 
                              : 'border-gray-300 hover:border-gray-500'
                          } transition-all duration-200 transform hover:scale-105`}
                          title={colorOption.name}
                        >
                          {newColumnForm.color === colorOption.bg && (
                            <div className="absolute inset-0 flex items-center justify-center">
                              <svg className="w-6 h-6 text-gray-800" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                            </div>
                          )}
                        </button>
                      ))}
                    </div>
                    <p className="text-xs text-gray-500 mt-2">
                      Escolha a cor que representa melhor esta etapa do funil
                    </p>
                  </div>

                  <div className="mb-4 space-y-4">
                    <label className="flex items-start space-x-3 cursor-pointer group">
                      <input
                        type="checkbox"
                        checked={newColumnForm.shouldSum}
                        onChange={(e) => setNewColumnForm(prev => ({ ...prev, shouldSum: e.target.checked }))}
                        className="mt-1 rounded border-gray-300 text-purple-600 focus:ring-purple-500 w-4 h-4"
                      />
                      <div>
                        <span className="text-sm font-medium text-gray-700 group-hover:text-purple-600 transition-colors">
                          Calcular total financeiro
                        </span>
                        <p className="text-xs text-gray-500 mt-1">
                          Soma automaticamente os valores dos leads nesta coluna
                        </p>
                      </div>
                    </label>

                    <label className="flex items-start space-x-3 cursor-pointer group">
                      <input
                        type="checkbox"
                        checked={newColumnForm.showCount}
                        onChange={(e) => setNewColumnForm(prev => ({ ...prev, showCount: e.target.checked }))}
                        className="mt-1 rounded border-gray-300 text-purple-600 focus:ring-purple-500 w-4 h-4"
                      />
                      <div>
                        <span className="text-sm font-medium text-gray-700 group-hover:text-purple-600 transition-colors">
                          Exibir quantidade de leads
                        </span>
                        <p className="text-xs text-gray-500 mt-1">
                          Mostra o número total de leads nesta coluna
                        </p>
                      </div>
                    </label>
                  </div>

                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      Tamanho da Fonte do Título
                    </label>
                    <div className="grid grid-cols-4 gap-2">
                      {[
                        { value: 'text-xs', label: 'Pequeno', preview: 'Aa' },
                        { value: 'text-sm', label: 'Normal', preview: 'Aa' },
                        { value: 'text-base', label: 'Médio', preview: 'Aa' },
                        { value: 'text-lg', label: 'Grande', preview: 'Aa' }
                      ].map((size) => (
                        <button
                          key={size.value}
                          onClick={() => setNewColumnForm(prev => ({ ...prev, fontSize: size.value }))}
                          className={`p-3 rounded-lg border-2 transition-all duration-200 hover:scale-105 ${
                            newColumnForm.fontSize === size.value
                              ? 'border-purple-500 bg-purple-50 ring-2 ring-purple-200'
                              : 'border-gray-300 hover:border-gray-400'
                          }`}
                        >
                          <div className={`${size.value} font-semibold text-gray-800 mb-1`}>
                            {size.preview}
                          </div>
                          <div className="text-xs text-gray-600">
                            {size.label}
                          </div>
                        </button>
                      ))}
                    </div>
                    <p className="text-xs text-gray-500 mt-2">
                      Escolha o tamanho da fonte para o nome da coluna
                    </p>
                  </div>
                </div>
              </div>

              {/* Preview e Dicas */}
              <div className="space-y-6">
                {/* Preview da Nova Coluna */}
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                    </svg>
                    Preview da Nova Coluna
                  </h4>
                  
                  <div className="border rounded-lg p-3">
                    <div className={`${newColumnForm.color} ${colorOptions.find(c => c.bg === newColumnForm.color)?.border || 'border-gray-300'} border-2 rounded-lg p-3`}>
                      <div className="flex items-center justify-between mb-2">
                        <h3 className={`font-semibold ${colorOptions.find(c => c.bg === newColumnForm.color)?.text || 'text-gray-800'} ${newColumnForm.fontSize}`}>
                          {newColumnForm.name || 'Nome da Nova Coluna'}
                        </h3>
                      </div>
                      
                      <div className="mb-2">
                        {newColumnForm.showCount && (
                          <span className={`text-xs ${colorOptions.find(c => c.bg === newColumnForm.color)?.text || 'text-gray-800'} font-medium`}>
                            0 leads
                          </span>
                        )}
                        {newColumnForm.shouldSum && (
                          <div className={`text-sm ${colorOptions.find(c => c.bg === newColumnForm.color)?.text || 'text-gray-800'} font-bold ${newColumnForm.showCount ? 'mt-0.5' : ''}`}>
                            R$ 0,00
                          </div>
                        )}
                      </div>
                      
                      <hr className="border-gray-300 mb-2" />
                      
                      <div className="text-xs text-gray-500 text-center py-4 border-2 border-dashed border-gray-300 rounded">
                        A nova coluna aparecerá aqui
                      </div>
                    </div>
                  </div>
                </div>

                {/* Dicas */}
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-yellow-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                    Dicas para Sua Nova Coluna
                  </h4>
                  
                  <div className="bg-yellow-50 rounded-lg p-4 space-y-3">
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Nome Descritivo</p>
                        <p className="text-xs text-gray-600">Use nomes que deixem claro o status do lead nesta etapa</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Cores Distintas</p>
                        <p className="text-xs text-gray-600">Escolha cores diferentes para facilitar a visualização</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                      <div>
                        <p className="text-sm text-gray-700 font-medium">Ordenação Lógica</p>
                        <p className="text-xs text-gray-600">A nova coluna será adicionada ao final do funil</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="bg-gray-50 px-6 py-4 flex justify-between items-center">
            <div className="text-sm text-gray-500">
              * Campos obrigatórios
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={handleCancelNewColumn}
                className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleSaveNewColumn}
                disabled={!newColumnForm.name.trim()}
                className={`px-6 py-2 text-sm font-medium text-white rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl ${
                  newColumnForm.name.trim() 
                    ? 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700' 
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                Criar Coluna
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const EditCollaboratorModal = () => {
    if (!editingCollaborator) return null;

    const currentCollaborator = collaborators.find(c => c.id === editingCollaborator);
    
    const availableColors = [
      'bg-gradient-to-r from-purple-500 to-pink-500',
      'bg-gradient-to-r from-blue-500 to-cyan-500',
      'bg-gradient-to-r from-green-500 to-emerald-500',
      'bg-gradient-to-r from-orange-500 to-red-500',
      'bg-gradient-to-r from-indigo-500 to-purple-500',
      'bg-gradient-to-r from-pink-500 to-rose-500',
      'bg-gradient-to-r from-yellow-500 to-orange-500',
      'bg-gradient-to-r from-teal-500 to-cyan-500'
    ];

    const availablePermissions = [
      { id: 'dashboard', name: 'Dashboard', icon: '📊', description: 'Visualizar relatórios e métricas' },
      { id: 'crm', name: 'CRM', icon: '👥', description: 'Gerenciar funis e leads' },
      { id: 'clientes', name: 'Clientes', icon: '🏆', description: 'Visualizar e editar clientes' },
      { id: 'configuracoes', name: 'Configurações', icon: '⚙️', description: 'Acesso às configurações do sistema' },
      { id: 'relatorios', name: 'Relatórios', icon: '📋', description: 'Gerar e exportar relatórios' }
    ];

    return (
      <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className={`${collaboratorForm.color} px-6 py-4 text-white`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold text-lg">
                    {collaboratorForm.avatar || collaboratorForm.name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase()}
                  </span>
                </div>
                <div>
                  <h3 className="text-xl font-bold">
                    {currentCollaborator?.name === 'Douglas Silva' ? 'Meu Perfil' : 'Editar Colaborador'}
                  </h3>
                  <p className="text-white text-opacity-90 text-sm">
                    {currentCollaborator?.name === 'Douglas Silva' ? 
                      'Configure seus dados pessoais e de acesso' : 
                      'Configure dados de acesso e permissões'
                    }
                  </p>
                </div>
              </div>
              <button
                onClick={handleCancelEditCollaborator}
                className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              
              {/* Dados Pessoais */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <span className="mr-2">👤</span>
                    Dados Pessoais
                  </h4>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nome Completo *
                      </label>
                      <input
                        type="text"
                        value={collaboratorForm.name}
                        onChange={(e) => setCollaboratorForm(prev => ({ ...prev, name: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                        placeholder="Nome completo do colaborador"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email de Acesso *
                      </label>
                      <input
                        type="email"
                        value={collaboratorForm.email}
                        onChange={(e) => setCollaboratorForm(prev => ({ ...prev, email: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                        placeholder="email@elitesolutions.com"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Cargo/Função
                      </label>
                      <input
                        type="text"
                        value={collaboratorForm.role}
                        onChange={(e) => setCollaboratorForm(prev => ({ ...prev, role: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                        placeholder="Ex: Vendedor, Supervisor, Administrador"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Iniciais do Avatar
                      </label>
                      <input
                        type="text"
                        value={collaboratorForm.avatar}
                        onChange={(e) => setCollaboratorForm(prev => ({ ...prev, avatar: e.target.value.substring(0, 2).toUpperCase() }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                        placeholder="Ex: DS, AB"
                        maxLength="2"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Máximo 2 caracteres (será gerado automaticamente baseado no nome se vazio)
                      </p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-3">
                        Cor do Avatar
                      </label>
                      <div className="grid grid-cols-4 gap-3">
                        {availableColors.map((color, index) => (
                          <button
                            key={index}
                            onClick={() => setCollaboratorForm(prev => ({ ...prev, color }))}
                            className={`h-12 rounded-lg ${color} transition-all duration-200 transform hover:scale-105 ${
                              collaboratorForm.color === color 
                                ? 'ring-4 ring-purple-500 ring-offset-2' 
                                : 'hover:ring-2 hover:ring-gray-300'
                            }`}
                            title={`Cor ${index + 1}`}
                          >
                            {collaboratorForm.color === color && (
                              <div className="flex items-center justify-center h-full">
                                <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                  <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                </svg>
                              </div>
                            )}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Permissões e Acesso */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <span className="mr-2">🔐</span>
                    Permissões e Acesso
                  </h4>

                  <div className="space-y-4">
                    <div className="bg-gray-50 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="font-medium text-gray-800">Gerenciamento de Senha</h5>
                      </div>
                      <div className="flex space-x-3">
                        <button
                          onClick={() => handleChangePassword(editingCollaborator)}
                          className="flex-1 bg-yellow-500 hover:bg-yellow-600 text-white py-2 px-4 rounded-lg text-sm font-medium transition-colors flex items-center justify-center"
                        >
                          <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L18 4L16 6L14 4L12 6L10 4L8 6L6 4L3 7V9H21Z"/>
                          </svg>
                          Trocar Senha
                        </button>
                        <button
                          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg text-sm font-medium transition-colors flex items-center"
                          title="Enviar senha por email"
                        >
                          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                          </svg>
                        </button>
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-3">
                        Permissões do Sistema
                      </label>
                      <div className="space-y-3">
                        {availablePermissions.map(permission => (
                          <label
                            key={permission.id}
                            className="flex items-start space-x-3 cursor-pointer group p-3 rounded-lg hover:bg-gray-50 transition-colors"
                          >
                            <input
                              type="checkbox"
                              checked={collaboratorForm.permissions.includes(permission.id)}
                              onChange={() => togglePermission(permission.id)}
                              className="mt-1 rounded border-gray-300 text-purple-600 focus:ring-purple-500 w-4 h-4"
                            />
                            <div className="flex-1">
                              <div className="flex items-center space-x-2">
                                <span className="text-sm">{permission.icon}</span>
                                <span className="text-sm font-medium text-gray-800 group-hover:text-purple-600 transition-colors">
                                  {permission.name}
                                </span>
                              </div>
                              <p className="text-xs text-gray-500 mt-1">
                                {permission.description}
                              </p>
                            </div>
                          </label>
                        ))}
                      </div>
                    </div>

                    {/* Status do Colaborador */}
                    <div className="bg-blue-50 rounded-lg p-4">
                      <h5 className="font-medium text-gray-800 mb-3">Status da Conta</h5>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-600">Status:</span>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            currentCollaborator?.status === 'online' ? 'bg-green-100 text-green-800' :
                            currentCollaborator?.status === 'away' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {currentCollaborator?.status === 'online' ? '🟢 Online' :
                             currentCollaborator?.status === 'away' ? '🟡 Ausente' :
                             '🔴 Offline'}
                          </span>
                        </div>
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-600">Último acesso:</span>
                          <span className="text-gray-800">
                            {currentCollaborator ? new Date(currentCollaborator.lastLogin).toLocaleDateString('pt-BR') : 'N/A'}
                          </span>
                        </div>
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-600">Permissões ativas:</span>
                          <span className="text-gray-800">
                            {collaboratorForm.permissions.length} de {availablePermissions.length}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="bg-gray-50 px-6 py-4 flex justify-between items-center">
            <button
              onClick={() => handleDeleteCollaborator(editingCollaborator)}
              className="px-4 py-2 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 transition-colors flex items-center"
            >
              <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
              </svg>
              Remover Colaborador
            </button>
            
            <div className="flex space-x-3">
              <button
                onClick={handleCancelEditCollaborator}
                className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleSaveCollaborator}
                disabled={!collaboratorForm.name.trim() || !collaboratorForm.email.trim()}
                className={`px-6 py-2 text-sm font-medium text-white rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl ${
                  collaboratorForm.name.trim() && collaboratorForm.email.trim() 
                    ? 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700' 
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                Salvar Alterações
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const EditColumnModal = () => {
    if (!editingColumn) return null;

    const currentColumn = columns.find(col => col.id === editingColumn);
    const columnLeads = leads[editingColumn] || [];

    return (
      <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-xl font-bold">Configurar Coluna</h3>
                <p className="text-blue-100 text-sm mt-1">
                  Personalize a aparência e comportamento da coluna
                </p>
              </div>
              <button
                onClick={() => setEditingColumn(null)}
                className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              
              {/* Configurações Básicas */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Configurações Básicas
                  </h4>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Nome da Coluna
                    </label>
                    <input
                      type="text"
                      value={editForm.name}
                      onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                      placeholder="Digite o nome da coluna"
                    />
                  </div>

                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      Tema da Coluna
                    </label>
                    <div className="grid grid-cols-5 gap-3">
                      {colorOptions.map((colorOption, index) => (
                        <button
                          key={index}
                          onClick={() => setEditForm(prev => ({ ...prev, color: colorOption.bg }))}
                          className={`relative w-14 h-14 rounded-xl border-3 ${colorOption.bg} ${
                            editForm.color === colorOption.bg 
                              ? 'border-gray-800 ring-2 ring-blue-500 ring-offset-2' 
                              : 'border-gray-300 hover:border-gray-500'
                          } transition-all duration-200 transform hover:scale-105`}
                          title={colorOption.name}
                        >
                          {editForm.color === colorOption.bg && (
                            <div className="absolute inset-0 flex items-center justify-center">
                              <svg className="w-6 h-6 text-gray-800" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                            </div>
                          )}
                        </button>
                      ))}
                    </div>
                    <p className="text-xs text-gray-500 mt-2">
                      Escolha a cor que representa melhor esta etapa do funil
                    </p>
                  </div>

                  <div className="mb-4 space-y-4">
                    <label className="flex items-start space-x-3 cursor-pointer group">
                      <input
                        type="checkbox"
                        checked={editForm.shouldSum}
                        onChange={(e) => setEditForm(prev => ({ ...prev, shouldSum: e.target.checked }))}
                        className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500 w-4 h-4"
                      />
                      <div>
                        <span className="text-sm font-medium text-gray-700 group-hover:text-blue-600 transition-colors">
                          Calcular total financeiro
                        </span>
                        <p className="text-xs text-gray-500 mt-1">
                          Soma automaticamente os valores dos leads nesta coluna
                        </p>
                      </div>
                    </label>

                    <label className="flex items-start space-x-3 cursor-pointer group">
                      <input
                        type="checkbox"
                        checked={editForm.showCount}
                        onChange={(e) => setEditForm(prev => ({ ...prev, showCount: e.target.checked }))}
                        className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500 w-4 h-4"
                      />
                      <div>
                        <span className="text-sm font-medium text-gray-700 group-hover:text-blue-600 transition-colors">
                          Exibir quantidade de leads
                        </span>
                        <p className="text-xs text-gray-500 mt-1">
                          Mostra o número total de leads nesta coluna
                        </p>
                      </div>
                    </label>
                  </div>

                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      Tamanho da Fonte do Título
                    </label>
                    <div className="grid grid-cols-4 gap-2">
                      {[
                        { value: 'text-xs', label: 'Pequeno', preview: 'Aa' },
                        { value: 'text-sm', label: 'Normal', preview: 'Aa' },
                        { value: 'text-base', label: 'Médio', preview: 'Aa' },
                        { value: 'text-lg', label: 'Grande', preview: 'Aa' }
                      ].map((size) => (
                        <button
                          key={size.value}
                          onClick={() => setEditForm(prev => ({ ...prev, fontSize: size.value }))}
                          className={`p-3 rounded-lg border-2 transition-all duration-200 hover:scale-105 ${
                            editForm.fontSize === size.value
                              ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200'
                              : 'border-gray-300 hover:border-gray-400'
                          }`}
                        >
                          <div className={`${size.value} font-semibold text-gray-800 mb-1`}>
                            {size.preview}
                          </div>
                          <div className="text-xs text-gray-600">
                            {size.label}
                          </div>
                        </button>
                      ))}
                    </div>
                    <p className="text-xs text-gray-500 mt-2">
                      Escolha o tamanho da fonte para o nome da coluna
                    </p>
                  </div>
                </div>
              </div>

              {/* Informações da Coluna */}
              <div className="space-y-6">
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
                    </svg>
                    Estatísticas Atuais
                  </h4>
                  
                  <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Total de Leads:</span>
                      <span className="font-semibold text-gray-800">{columnLeads.length}</span>
                    </div>
                    
                    {currentColumn?.shouldSum && (
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">Valor Total:</span>
                        <span className="font-semibold text-green-600">
                          {calculateColumnTotal(editingColumn, true)}
                        </span>
                      </div>
                    )}
                    
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Exibir Contador:</span>
                      <span className="text-sm font-medium">
                        {currentColumn?.showCount ? '✅ Sim' : '❌ Não'}
                      </span>
                    </div>
                    
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Tamanho da Fonte:</span>
                      <span className="text-sm font-medium">
                        {currentColumn?.fontSize === 'text-xs' ? 'Pequeno' :
                         currentColumn?.fontSize === 'text-sm' ? 'Normal' :
                         currentColumn?.fontSize === 'text-base' ? 'Médio' : 'Grande'}
                      </span>
                    </div>
                    
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Tema Atual:</span>
                      <div className="flex items-center space-x-2">
                        <div className={`w-4 h-4 rounded ${currentColumn?.color}`}></div>
                        <span className="text-sm font-medium">
                          {colorOptions.find(c => c.bg === currentColumn?.color)?.name || 'Personalizado'}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Preview da Coluna */}
                <div>
                  <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-purple-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                    </svg>
                    Preview
                  </h4>
                  
                  <div className="border rounded-lg p-3">
                    <div className={`${editForm.color} ${colorOptions.find(c => c.bg === editForm.color)?.border || 'border-gray-300'} border-2 rounded-lg p-3`}>
                      <div className="flex items-center justify-between mb-2">
                        <h3 className={`font-semibold ${colorOptions.find(c => c.bg === editForm.color)?.text || 'text-gray-800'} ${editForm.fontSize}`}>
                          {editForm.name || 'Nome da Coluna'}
                        </h3>
                      </div>
                      
                      <div className="mb-2">
                        {editForm.showCount && (
                          <span className={`text-xs ${colorOptions.find(c => c.bg === editForm.color)?.text || 'text-gray-800'} font-medium`}>
                            {columnLeads.length} leads
                          </span>
                        )}
                        {editForm.shouldSum && (
                          <div className={`text-sm ${colorOptions.find(c => c.bg === editForm.color)?.text || 'text-gray-800'} font-bold ${editForm.showCount ? 'mt-0.5' : ''}`}>
                            {calculateColumnTotal(editingColumn, true) || 'R$ 0,00'}
                          </div>
                        )}
                      </div>
                      
                      <hr className="border-gray-300 mb-2" />
                      
                      <div className="text-xs text-gray-500 text-center py-2">
                        Preview da coluna
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="bg-gray-50 px-6 py-4 flex justify-between items-center">
            <button
              onClick={() => handleDeleteColumn(editingColumn)}
              className="px-4 py-2 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 transition-colors flex items-center"
            >
              <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
              </svg>
              Excluir Coluna
            </button>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setEditingColumn(null)}
                className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleSaveColumn}
                className="px-6 py-2 text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                Salvar Alterações
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Ghost de lead que segue o cursor
  const DragGhost = () => {
    if (!isDragging || !draggedItem) return null;

    return (
      <div
        className="fixed pointer-events-none z-50 transform rotate-3"
        style={{
          left: dragPosition.x,
          top: dragPosition.y,
          width: '300px'
        }}
      >
        <LeadCard 
          lead={draggedItem.lead} 
          columnId={draggedItem.sourceColumn} 
          isGhost={true}
        />
      </div>
    );
  };

  // Ghost de coluna que segue o cursor
  const ColumnDragGhost = () => {
    if (!isDraggingColumn || !draggedColumn) return null;

    const columnLeads = leads[draggedColumn.id] || [];

    return (
      <div
        className="fixed pointer-events-none z-50 transform rotate-2 scale-90"
        style={{
          left: columnDragPosition.x,
          top: columnDragPosition.y,
          width: '320px'
        }}
      >
        <div className={`${draggedColumn.color} ${draggedColumn.borderColor} border-2 rounded-lg p-4 shadow-2xl opacity-95`}>
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center space-x-2">
              <svg className="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                <path d="M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
              </svg>
              <h3 className={`font-semibold ${draggedColumn.textColor} ${draggedColumn.fontSize || 'text-sm'}`}>
                {draggedColumn.name}
              </h3>
            </div>
          </div>
          
          <div className="mb-2">
            {draggedColumn.showCount && (
              <span className={`text-xs ${draggedColumn.textColor} font-medium`}>
                {columnLeads.length} leads
              </span>
            )}
            {draggedColumn.shouldSum && (
              <div className={`text-sm ${draggedColumn.textColor} font-bold ${draggedColumn.showCount ? 'mt-0.5' : ''}`}>
                {calculateColumnTotal(draggedColumn.id, draggedColumn.shouldSum)}
              </div>
            )}
          </div>
          
          <hr className="border-gray-300 mb-3" />
          
          <div className="space-y-2 max-h-32 overflow-hidden">
            {columnLeads.slice(0, 2).map(lead => (
              <div key={lead.id} className="bg-white bg-opacity-70 rounded p-2 text-xs">
                <div className="flex items-center">
                  <div className={`w-6 h-6 rounded-full ${lead.color} flex items-center justify-center text-white text-xs font-bold mr-2`}>
                    {lead.avatar}
                  </div>
                  <span className="font-medium truncate">{lead.name}</span>
                </div>
              </div>
            ))}
            {columnLeads.length > 2 && (
              <div className="text-center text-xs text-gray-500 py-1">
                +{columnLeads.length - 2} mais leads
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  // FUNÇÃO PARA APLICAR FILTROS AOS LEADS
  const applyFiltersToLeads = (allLeads) => {
    return allLeads.filter(lead => {
      // Filtro por período
      if (dashboardFilters.periodo !== 'todos') {
        const leadDate = new Date(lead.dataContato || Date.now());
        const now = new Date();
        
        if (dashboardFilters.periodo === 'hoje') {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const tomorrow = new Date(today);
          tomorrow.setDate(tomorrow.getDate() + 1);
          if (leadDate < today || leadDate >= tomorrow) return false;
        } else if (dashboardFilters.periodo === 'semana') {
          const weekStart = new Date();
          weekStart.setDate(weekStart.getDate() - weekStart.getDay());
          weekStart.setHours(0, 0, 0, 0);
          if (leadDate < weekStart) return false;
        } else {
          const monthsAgo = {
            'ultimo_mes': 1,
            'ultimo_trimestre': 3,
            'ultimo_ano': 12
          }[dashboardFilters.periodo];
          
          if (monthsAgo) {
            const cutoffDate = new Date(now.getFullYear(), now.getMonth() - monthsAgo, now.getDate());
            if (leadDate < cutoffDate) return false;
          }
        }
      }
      
      // Filtro por data inicial e final personalizada
      if (dashboardFilters.dataInicial) {
        const leadDate = new Date(lead.dataContato || Date.now());
        const startDate = new Date(dashboardFilters.dataInicial);
        if (leadDate < startDate) return false;
      }
      
      if (dashboardFilters.dataFinal) {
        const leadDate = new Date(lead.dataContato || Date.now());
        const endDate = new Date(dashboardFilters.dataFinal);
        endDate.setHours(23, 59, 59, 999); // Inclui o dia todo
        if (leadDate > endDate) return false;
      }
      
      // Filtro por origem
      if (dashboardFilters.origem !== 'todas' && lead.source !== dashboardFilters.origem) {
        return false;
      }
      
      // Filtro por sexo
      if (dashboardFilters.sexo !== 'todos') {
        if (dashboardFilters.sexo === 'masculino' && lead.sexo !== 'Masculino') return false;
        if (dashboardFilters.sexo === 'feminino' && lead.sexo !== 'Feminino') return false;
      }
      
      // Filtro por faixa etária
      if (dashboardFilters.faixaEtaria !== 'todas' && lead.idade) {
        const idade = lead.idade;
        const faixa = dashboardFilters.faixaEtaria;
        
        if (faixa === '18-25' && (idade < 18 || idade > 25)) return false;
        if (faixa === '26-35' && (idade < 26 || idade > 35)) return false;
        if (faixa === '36-45' && (idade < 36 || idade > 45)) return false;
        if (faixa === '46+' && idade < 46) return false;
      }
      
      // Filtro por valor
      if (dashboardFilters.valorMinimo && lead.value < parseFloat(dashboardFilters.valorMinimo)) {
        return false;
      }
      if (dashboardFilters.valorMaximo && lead.value > parseFloat(dashboardFilters.valorMaximo)) {
        return false;
      }
      
      return true;
    });
  };

  // FUNÇÃO PARA CALCULAR KPIs COM FILTROS
  const calculateDashboardKPIs = () => {
    // Obter leads do funil selecionado ou todos os funis
    let allLeads;
    if (dashboardFilters.funil !== 'todos') {
      const selectedFunnel = funnels.find(f => f.id === dashboardFilters.funil);
      allLeads = selectedFunnel ? Object.values(selectedFunnel.leads).flat() : [];
    } else {
      allLeads = funnels.flatMap(funnel => Object.values(funnel.leads).flat());
    }
    
    // Aplicar filtros
    const filteredLeads = applyFiltersToLeads(allLeads);
    
    // KPIs Gerais
    const totalLeads = filteredLeads.length;
    const totalValue = filteredLeads.reduce((sum, lead) => sum + (lead.value || 0), 0);
    
    // Encontrar colunas de vendas e perdidos do funil atual
    const currentFunnelData = dashboardFilters.funil !== 'todos' 
      ? funnels.find(f => f.id === dashboardFilters.funil) 
      : currentFunnel;
    
    const vendasColumns = currentFunnelData?.columns?.filter(col => 
      col.name.toLowerCase().includes('venda') || 
      col.name.toLowerCase().includes('fechad') ||
      col.name.toLowerCase().includes('concluíd')
    ) || [];
    
    const perdidosColumns = currentFunnelData?.columns?.filter(col => 
      col.name.toLowerCase().includes('perdid') || 
      col.name.toLowerCase().includes('cancelad') ||
      col.name.toLowerCase().includes('recusad')
    ) || [];
    
    const vendas = vendasColumns.flatMap(col => 
      applyFiltersToLeads(currentFunnelData?.leads?.[col.id] || [])
    );
    
    const perdidos = perdidosColumns.flatMap(col => 
      applyFiltersToLeads(currentFunnelData?.leads?.[col.id] || [])
    );
    
    // Taxa de Conversão
    const taxaConversao = totalLeads > 0 ? ((vendas.length / totalLeads) * 100).toFixed(1) : 0;
    
    // Ticket Médio
    const ticketMedio = vendas.length > 0 ? vendas.reduce((sum, lead) => sum + (lead.value || 0), 0) / vendas.length : 0;
    
    // KPIs por Funil - Agora dinâmico baseado no funil selecionado
    const activeFunnelColumns = dashboardFilters.funil !== 'todos' 
      ? funnels.find(f => f.id === dashboardFilters.funil)?.columns || []
      : columns;
      
    const activeFunnelLeads = dashboardFilters.funil !== 'todos' 
      ? funnels.find(f => f.id === dashboardFilters.funil)?.leads || {}
      : leads;
    
    const funnelKPIs = activeFunnelColumns.map(column => {
      const columnLeads = applyFiltersToLeads(activeFunnelLeads[column.id] || []);
      const columnValue = columnLeads.reduce((sum, lead) => sum + (lead.value || 0), 0);
      return {
        name: column.name,
        count: columnLeads.length,
        value: columnValue,
        color: column.color,
        textColor: column.textColor,
        percentage: totalLeads > 0 ? ((columnLeads.length / totalLeads) * 100).toFixed(1) : 0
      };
    });
    
    // KPIs por Origem
    const origemStats = {};
    filteredLeads.forEach(lead => {
      if (!origemStats[lead.source]) {
        origemStats[lead.source] = { count: 0, value: 0 };
      }
      origemStats[lead.source].count++;
      origemStats[lead.source].value += lead.value || 0;
    });
    
    const origemKPIs = Object.entries(origemStats).map(([source, stats]) => ({
      source,
      count: stats.count,
      value: stats.value,
      percentage: totalLeads > 0 ? ((stats.count / totalLeads) * 100).toFixed(1) : 0
    })).sort((a, b) => b.count - a.count);
    
    // KPIs por Sexo
    const sexoStats = { Masculino: 0, Feminino: 0, NaoInformado: 0 };
    filteredLeads.forEach(lead => {
      if (lead.sexo === 'Masculino') sexoStats.Masculino++;
      else if (lead.sexo === 'Feminino') sexoStats.Feminino++;
      else sexoStats.NaoInformado++;
    });
    
    // KPIs por Idade
    const idadeStats = { '18-25': 0, '26-35': 0, '36-45': 0, '46+': 0, NaoInformado: 0 };
    filteredLeads.forEach(lead => {
      if (!lead.idade) {
        idadeStats.NaoInformado++;
      } else if (lead.idade >= 18 && lead.idade <= 25) {
        idadeStats['18-25']++;
      } else if (lead.idade >= 26 && lead.idade <= 35) {
        idadeStats['26-35']++;
      } else if (lead.idade >= 36 && lead.idade <= 45) {
        idadeStats['36-45']++;
      } else if (lead.idade >= 46) {
        idadeStats['46+']++;
      }
    });
    
    return {
      totalLeads,
      totalValue,
      taxaConversao,
      ticketMedio,
      vendasCount: vendas.length,
      perdidosCount: perdidos.length,
      funnelKPIs,
      origemKPIs,
      sexoStats,
      idadeStats,
      filteredLeadsCount: filteredLeads.length,
      totalLeadsCount: funnels.flatMap(f => Object.values(f.leads).flat()).length
    };
  };

  // FUNÇÃO PARA LIMPAR TODOS OS FILTROS
  const clearAllFilters = () => {
    setDashboardFilters({
      periodo: 'todos',
      funil: 'todos',
      origem: 'todas',
      sexo: 'todos',
      faixaEtaria: 'todas',
      status: 'todos',
      valorMinimo: '',
      valorMaximo: '',
      dataInicial: '',
      dataFinal: '',
      statusPagamento: 'todos'
    });
  };

  // FUNÇÃO PARA OBTER TODAS AS ORIGENS ÚNICAS
  const getAllSources = () => {
    const allLeads = funnels.flatMap(funnel => Object.values(funnel.leads).flat());
    return [...new Set(allLeads.map(lead => lead.source))].sort();
  };

  // FUNÇÕES DO HEADER SUPERIOR
  const handleLogout = () => {
    if (window.confirm('Tem certeza que deseja sair do sistema?')) {
      // Aqui seria implementada a lógica de logout
      alert('Logout realizado com sucesso!');
      setShowUserMenu(false);
    }
  };

  const markNotificationAsRead = (notificationId) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === notificationId 
          ? { ...notif, isNew: false }
          : notif
      )
    );
  };

  const markAllNotificationsAsRead = () => {
    setNotifications(prev => 
      prev.map(notif => ({ ...notif, isNew: false }))
    );
  };

  const deleteNotification = (notificationId) => {
    setNotifications(prev => prev.filter(notif => notif.id !== notificationId));
  };

  // FUNÇÕES PARA GERENCIAMENTO DE COLABORADORES
  const handleEditCollaborator = (collaborator) => {
    setEditingCollaborator(collaborator.id);
    setCollaboratorForm({
      name: collaborator.name,
      email: collaborator.email,
      role: collaborator.role,
      avatar: collaborator.avatar,
      color: collaborator.color,
      permissions: [...collaborator.permissions]
    });
  };

  const handleSaveCollaborator = () => {
    if (collaboratorForm.name.trim() && collaboratorForm.email.trim()) {
      setCollaborators(prev => prev.map(collab => 
        collab.id === editingCollaborator 
          ? {
              ...collab,
              name: collaboratorForm.name.trim(),
              email: collaboratorForm.email.trim(),
              role: collaboratorForm.role.trim(),
              avatar: collaboratorForm.avatar.trim() || collaboratorForm.name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase(),
              color: collaboratorForm.color,
              permissions: collaboratorForm.permissions
            }
          : collab
      ));
      
      setEditingCollaborator(null);
      setCollaboratorForm({
        name: '',
        email: '',
        role: '',
        avatar: '',
        color: 'bg-gradient-to-r from-blue-500 to-purple-500',
        permissions: []
      });
      
      addNotification(
        'success',
        'Colaborador atualizado!',
        `Os dados de ${collaboratorForm.name} foram salvos com sucesso`,
        '✅',
        () => setCurrentPage('configuracoes'),
        'Ver Configurações'
      );
    }
  };

  const handleCancelEditCollaborator = () => {
    setEditingCollaborator(null);
    setCollaboratorForm({
      name: '',
      email: '',
      role: '',
      avatar: '',
      color: 'bg-gradient-to-r from-blue-500 to-purple-500',
      permissions: []
    });
  };

  const handleDeleteCollaborator = (collaboratorId) => {
    const collaborator = collaborators.find(c => c.id === collaboratorId);
    if (window.confirm(`Tem certeza que deseja remover ${collaborator?.name} do sistema?`)) {
      setCollaborators(prev => prev.filter(c => c.id !== collaboratorId));
      
      addNotification(
        'warning',
        'Colaborador removido',
        `${collaborator?.name} foi removido do sistema`,
        '🗑️',
        null,
        null
      );
    }
  };

  const handleChangePassword = (collaboratorId) => {
    const newPassword = prompt('Digite a nova senha:');
    if (newPassword && newPassword.length >= 6) {
      addNotification(
        'success',
        'Senha alterada!',
        'A senha foi alterada com sucesso',
        '🔐',
        null,
        null
      );
    } else if (newPassword) {
      alert('A senha deve ter pelo menos 6 caracteres');
    }
  };

  const togglePermission = (permission) => {
    setCollaboratorForm(prev => ({
      ...prev,
      permissions: prev.permissions.includes(permission)
        ? prev.permissions.filter(p => p !== permission)
        : [...prev.permissions, permission]
    }));
  };

  // SISTEMA DE NOTIFICAÇÕES AUTOMÁTICAS
  const addNotification = (type, title, message, icon, action = null, actionText = null) => {
    const newNotification = {
      id: Date.now() + Math.random(),
      type,
      title,
      message,
      time: 'Agora',
      isNew: true,
      icon,
      action,
      actionText
    };
    
    setNotifications(prev => [newNotification, ...prev.slice(0, 19)]); // Manter apenas 20 notificações
  };

  // MONITORES AUTOMÁTICOS DO SISTEMA
  const checkSystemAlerts = () => {
    const kpis = calculateDashboardKPIs();
    
    // Verificar se filtros estão ativos há muito tempo
    const hasActiveFilters = Object.values(dashboardFilters).some(v => v !== 'todos' && v !== 'todas' && v !== '');
    if (hasActiveFilters && Math.random() < 0.3) { // Simula verificação periódica
      addNotification(
        'filter',
        'Filtros ativos detectados',
        `Você tem ${Object.values(dashboardFilters).filter(v => v !== 'todos' && v !== 'todas' && v !== '').length} filtros aplicados no dashboard`,
        '🔍',
        () => {
          setCurrentPage('dashboard');
          clearAllFilters();
        },
        'Limpar Filtros'
      );
    }
    
    // Verificar taxa de conversão baixa
    if (parseFloat(kpis.taxaConversao) < 5 && kpis.totalLeads > 10) {
      addNotification(
        'warning',
        'Taxa de conversão baixa',
        `Sua conversão atual é de ${kpis.taxaConversao}%. Considere revisar o processo de vendas.`,
        '📉',
        () => setCurrentPage('dashboard'),
        'Analisar Dados'
      );
    }
    
    // Verificar se está próximo de metas
    if (parseFloat(kpis.taxaConversao) > 15) {
      addNotification(
        'target',
        'Excelente performance!',
        `Taxa de conversão de ${kpis.taxaConversao}% está acima da média!`,
        '🎯',
        () => setCurrentPage('dashboard'),
        'Ver Detalhes'
      );
    }
    
    // Verificar leads parados (simulação - normalmente seria baseado em timestamp real)
    const allLeads = Object.values(leads).flat();
    const leadsParados = allLeads.filter(lead => {
      // Simular leads que estão há mais tempo sem movimentação
      const isInNegociacao = leads.negociacao?.some(l => l.id === lead.id);
      const isOld = Math.random() < 0.2; // Simula 20% de chance de ser "antigo"
      return isInNegociacao && isOld;
    });
    
    if (leadsParados.length > 0) {
      addNotification(
        'reminder',
        `${leadsParados.length} leads precisam de follow-up`,
        'Leads na etapa "Negociação" há mais de 3 dias sem movimentação',
        '⏰',
        () => setCurrentPage('crm'),
        'Verificar Leads'
      );
    }
    
    // Verificar melhor fonte de leads
    if (kpis.origemKPIs.length > 0) {
      const melhorOrigem = kpis.origemKPIs[0];
      if (parseFloat(melhorOrigem.percentage) > 30) {
        addNotification(
          'performance',
          `${melhorOrigem.source} está em alta!`,
          `${melhorOrigem.percentage}% dos seus leads vêm desta fonte - considere investir mais`,
          '📊',
          () => {
            setCurrentPage('dashboard');
            setDashboardFilters(prev => ({ ...prev, origem: melhorOrigem.source }));
          },
          'Analisar Origem'
        );
      }
    }
  };

  // COMPONENTE DO HEADER SUPERIOR
  const TopHeader = () => (
    <div className="bg-gradient-to-b from-slate-900 via-slate-800 to-gray-900 border-b border-gray-700 px-6 py-3 flex items-center justify-between relative z-50 w-full min-w-full">
      {/* Título */}
      <div className="flex items-center space-x-4">
        <div>
          <h1 className="text-lg font-bold text-white">Elite Solutions</h1>
          <p className="text-xs text-white/60">Sistema CRM</p>
        </div>
      </div>

      {/* Ações do Header */}
      <div className="flex items-center space-x-4">
        {/* Indicador de Status Online */}
        <div className="flex items-center space-x-2 bg-green-500/20 px-3 py-1 rounded-full border border-green-400/30">
          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
          <span className="text-xs font-medium text-green-300">Online</span>
        </div>

        {/* Notificações */}
        <div className="relative">
          <button
            onClick={() => setShowNotifications(!showNotifications)}
            className="relative w-10 h-10 bg-white/10 hover:bg-white/20 rounded-full flex items-center justify-center transition-colors"
          >
            <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"/>
            </svg>
            {unreadNotifications > 0 && (
              <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center animate-bounce">
                {unreadNotifications > 9 ? '9+' : unreadNotifications}
              </div>
            )}
          </button>

          {/* Dropdown de Notificações */}
          {showNotifications && (
            <>
              <div 
                className="fixed inset-0 z-10" 
                onClick={() => setShowNotifications(false)}
              ></div>
              <div className="absolute right-0 top-12 w-80 bg-white rounded-xl shadow-2xl border border-gray-200 z-20 max-h-96 overflow-hidden">
                {/* Header das Notificações */}
                <div className="bg-gradient-to-r from-blue-50 to-purple-50 px-4 py-3 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold text-gray-800 flex items-center">
                      <span className="mr-2">🔔</span>
                      Notificações
                    </h3>
                    <div className="flex items-center space-x-2">
                      {unreadNotifications > 0 && (
                        <button
                          onClick={markAllNotificationsAsRead}
                          className="text-xs text-blue-600 hover:text-blue-800 font-medium"
                        >
                          Marcar todas como lidas
                        </button>
                      )}
                      <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full font-medium">
                        {notifications.length}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Lista de Notificações */}
                <div className="max-h-80 overflow-y-auto">
                  {notifications.length === 0 ? (
                    <div className="p-6 text-center">
                      <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
                        <svg className="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"/>
                        </svg>
                      </div>
                      <p className="text-gray-500 text-sm">Nenhuma notificação</p>
                    </div>
                  ) : (
                    <div className="divide-y divide-gray-100">
                      {notifications.map((notification) => (
                        <div
                          key={notification.id}
                          className={`p-4 hover:bg-gray-50 transition-colors relative ${
                            notification.isNew ? 'bg-blue-50 border-l-4 border-blue-500' : ''
                          }`}
                        >
                          <div className="flex items-start space-x-3">
                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm ${
                              notification.type === 'success' ? 'bg-green-100' :
                              notification.type === 'warning' ? 'bg-yellow-100' :
                              notification.type === 'info' ? 'bg-blue-100' :
                              notification.type === 'target' ? 'bg-purple-100' :
                              notification.type === 'conversion' ? 'bg-green-100' :
                              notification.type === 'system' ? 'bg-gray-100' :
                              notification.type === 'filter' ? 'bg-orange-100' :
                              notification.type === 'funnel' ? 'bg-indigo-100' :
                              notification.type === 'performance' ? 'bg-emerald-100' :
                              notification.type === 'reminder' ? 'bg-red-100' : 'bg-gray-100'
                            }`}>
                              {notification.icon}
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex items-start justify-between">
                                <div className="flex-1">
                                  <h4 className="text-sm font-medium text-gray-800 mb-1">
                                    {notification.title}
                                  </h4>
                                  <p className="text-sm text-gray-600 mb-2">
                                    {notification.message}
                                  </p>
                                  <div className="flex items-center justify-between">
                                    <p className="text-xs text-gray-400">
                                      {notification.time}
                                    </p>
                                    {notification.action && notification.actionText && (
                                      <button
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          markNotificationAsRead(notification.id);
                                          notification.action();
                                          setShowNotifications(false);
                                        }}
                                        className={`text-xs font-medium px-2 py-1 rounded transition-colors ${
                                          notification.type === 'success' ? 'text-green-700 hover:bg-green-100' :
                                          notification.type === 'warning' ? 'text-yellow-700 hover:bg-yellow-100' :
                                          notification.type === 'info' ? 'text-blue-700 hover:bg-blue-100' :
                                          notification.type === 'target' ? 'text-purple-700 hover:bg-purple-100' :
                                          notification.type === 'conversion' ? 'text-green-700 hover:bg-green-100' :
                                          notification.type === 'system' ? 'text-gray-700 hover:bg-gray-100' :
                                          notification.type === 'filter' ? 'text-orange-700 hover:bg-orange-100' :
                                          notification.type === 'funnel' ? 'text-indigo-700 hover:bg-indigo-100' :
                                          notification.type === 'performance' ? 'text-emerald-700 hover:bg-emerald-100' :
                                          notification.type === 'reminder' ? 'text-red-700 hover:bg-red-100' : 'text-gray-700 hover:bg-gray-100'
                                        }`}
                                      >
                                        {notification.actionText} →
                                      </button>
                                    )}
                                  </div>
                                </div>
                                <div className="flex items-center space-x-1 ml-2">
                                  {notification.isNew && (
                                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                                  )}
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      deleteNotification(notification.id);
                                    }}
                                    className="w-6 h-6 flex items-center justify-center text-gray-400 hover:text-red-500 rounded transition-colors"
                                    title="Remover notificação"
                                  >
                                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                      <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                                    </svg>
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* Footer das Notificações */}
                {notifications.length > 0 && (
                  <div className="bg-gray-50 px-4 py-3 border-t border-gray-200 space-y-2">
                    <button 
                      onClick={() => {
                        checkSystemAlerts();
                        addNotification(
                          'system',
                          'Verificação do sistema executada',
                          'Análise automática dos dados foi concluída',
                          '🔄',
                          null,
                          null
                        );
                      }}
                      className="w-full text-center text-sm text-green-600 hover:text-green-800 font-medium bg-green-50 hover:bg-green-100 py-2 rounded-lg transition-colors"
                    >
                      🔄 Verificar Sistema Agora
                    </button>
                    <button 
                      className="w-full text-center text-sm text-blue-600 hover:text-blue-800 font-medium"
                      onClick={() => setShowNotifications(false)}
                    >
                      Ver todas as notificações
                    </button>
                  </div>
                )}
              </div>
            </>
          )}
        </div>

        {/* Avatar do Usuário */}
        <div className="relative">
          <button
            onClick={() => setShowUserMenu(!showUserMenu)}
            className="flex items-center space-x-3 bg-white/10 hover:bg-white/20 rounded-full p-2 transition-colors"
          >
            <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
              <span className="text-white font-bold text-sm">DS</span>
            </div>
            <div className="hidden md:block text-left">
              <p className="text-sm font-medium text-white">Douglas Silva</p>
              <p className="text-xs text-gray-300">Administrador</p>
            </div>
            <svg className={`w-4 h-4 text-white transition-transform ${showUserMenu ? 'rotate-180' : ''}`} fill="currentColor" viewBox="0 0 24 24">
              <path d="M7 10l5 5 5-5z"/>
            </svg>
          </button>

          {/* Dropdown do Usuário */}
          {showUserMenu && (
            <>
              <div 
                className="fixed inset-0 z-10" 
                onClick={() => setShowUserMenu(false)}
              ></div>
              <div className="absolute right-0 top-12 w-64 bg-white rounded-xl shadow-2xl border border-gray-200 z-20 overflow-hidden">
                {/* Header do Menu */}
                <div className="bg-gradient-to-r from-purple-500 to-pink-500 px-4 py-4 text-white">
                  <div className="flex items-center space-x-3">
                    <div className="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                      <span className="text-white font-bold text-lg">DS</span>
                    </div>
                    <div>
                      <h3 className="font-semibold">Douglas Silva</h3>
                      <p className="text-sm text-purple-100">douglas@elitesolutions.com</p>
                      <p className="text-xs text-purple-200">Administrador do Sistema</p>
                    </div>
                  </div>
                </div>

                {/* Estatísticas Rápidas */}
                <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                  <div className="grid grid-cols-3 gap-3 text-center">
                    <div>
                      <div className="text-lg font-bold text-blue-600">127</div>
                      <div className="text-xs text-gray-600">Leads</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-green-600">89%</div>
                      <div className="text-xs text-gray-600">Meta</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-purple-600">15</div>
                      <div className="text-xs text-gray-600">Vendas</div>
                    </div>
                  </div>
                </div>

                {/* Opções do Menu */}
                <div className="py-2">
                  <button 
                    onClick={() => {
                      // Encontrar o usuário atual nos colaboradores e abrir para edição
                      const currentUser = collaborators.find(c => c.name === 'Douglas Silva');
                      if (currentUser) {
                        setCurrentPage('configuracoes'); // Ir para a página de configurações
                        handleEditCollaborator(currentUser); // Abrir modal de edição do próprio perfil
                      }
                      setShowUserMenu(false);
                    }}
                    className="w-full text-left px-4 py-3 hover:bg-gray-50 transition-colors flex items-center space-x-3"
                  >
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      <svg className="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-800">Meu Perfil</p>
                      <p className="text-xs text-gray-500">Editar informações pessoais</p>
                    </div>
                  </button>

                  <div className="border-t border-gray-200 my-2"></div>

                  <button 
                    onClick={handleLogout}
                    className="w-full text-left px-4 py-3 hover:bg-red-50 transition-colors flex items-center space-x-3"
                  >
                    <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                      <svg className="w-4 h-4 text-red-600" fill="currentColor" viewBox="0 0 24 24">
                        <path fillRule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 01-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clipRule="evenodd"/>
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-red-600">Sair do Sistema</p>
                      <p className="text-xs text-red-400">Fazer logout da conta</p>
                    </div>
                  </button>
                </div>

                {/* Footer com Tempo Online */}
                <div className="bg-gray-50 px-4 py-3 border-t border-gray-200">
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>Logado há 2h 34min</span>
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span>Online</span>
                    </div>
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );

  // MODAL DE CALENDÁRIO PERSONALIZADO - SIMPLES
  const CustomDateModal = () => {
    if (!showCustomDateModal) return null;

    const [tempDataInicial, setTempDataInicial] = useState(dashboardFilters.dataInicial || '');
    const [tempDataFinal, setTempDataFinal] = useState(dashboardFilters.dataFinal || '');

    const handleSaveCustomDates = () => {
      if (tempDataInicial && tempDataFinal) {
        // Validar se data inicial é anterior à data final
        if (new Date(tempDataInicial) > new Date(tempDataFinal)) {
          alert('A data inicial deve ser anterior à data final');
          return;
        }
        
        setDashboardFilters(prev => ({
          ...prev,
          periodo: 'personalizado',
          dataInicial: tempDataInicial,
          dataFinal: tempDataFinal
        }));
        setShowCustomDateModal(false);
      } else {
        alert('Por favor, selecione tanto a data inicial quanto a data final');
      }
    };

    const handleCancel = () => {
      setShowCustomDateModal(false);
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-[60] p-4">
        <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
          {/* Header */}
          <div className="bg-blue-600 px-4 py-3 text-white rounded-t-lg">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">Período Personalizado</h3>
              <button
                onClick={handleCancel}
                className="w-6 h-6 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-4 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Data de Início
              </label>
              <input
                type="date"
                value={tempDataInicial}
                onChange={(e) => setTempDataInicial(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                max={tempDataFinal || new Date().toISOString().split('T')[0]}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Data de Fim
              </label>
              <input
                type="date"
                value={tempDataFinal}
                onChange={(e) => setTempDataFinal(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                min={tempDataInicial}
                max={new Date().toISOString().split('T')[0]}
              />
            </div>

            {/* Validação */}
            {tempDataInicial && tempDataFinal && new Date(tempDataInicial) > new Date(tempDataFinal) && (
              <div className="bg-red-50 rounded-lg p-3 border border-red-200">
                <p className="text-sm text-red-700">
                  A data inicial deve ser anterior à data final
                </p>
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="bg-gray-50 px-4 py-3 flex justify-end space-x-2 rounded-b-lg">
            <button
              onClick={handleCancel}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Cancelar
            </button>
            <button
              onClick={handleSaveCustomDates}
              disabled={!tempDataInicial || !tempDataFinal || new Date(tempDataInicial) > new Date(tempDataFinal)}
              className={`px-4 py-2 text-sm font-medium text-white rounded-lg transition-colors ${
                tempDataInicial && tempDataFinal && new Date(tempDataInicial) <= new Date(tempDataFinal)
                  ? 'bg-blue-600 hover:bg-blue-700' 
                  : 'bg-gray-400 cursor-not-allowed'
              }`}
            >
              Aplicar
            </button>
          </div>
        </div>
      </div>
    );
  };

  // COMPONENTE DO DASHBOARD
  const DashboardContent = () => {
    const kpis = calculateDashboardKPIs();
    
    return (
      <>
        {/* Header */}
        <div className="bg-white p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-gray-800">Dashboard Executivo</h2>
              <p className="text-gray-600 mt-1">
                Visão geral em tempo real dos seus funis e leads
                {kpis.filteredLeadsCount !== kpis.totalLeadsCount && (
                  <span className="ml-2 text-blue-600 font-medium">
                    (Filtrado: {kpis.filteredLeadsCount} de {kpis.totalLeadsCount} leads)
                  </span>
                )}
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-500">
                Atualização: Tempo Real
              </div>
            </div>
          </div>
        </div>

        {/* Filtros Simples */}
        <div className="bg-white p-4 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-800 flex items-center">
              <svg className="w-5 h-5 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                <path d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
              </svg>
              Filtros
            </h3>
            <div className="flex items-center space-x-3">
              <span className="text-sm text-gray-600">
                {Object.values(dashboardFilters).filter(v => v !== 'todos' && v !== 'todas' && v !== '').length} filtros ativos
              </span>
              {Object.values(dashboardFilters).some(v => v !== 'todos' && v !== 'todas' && v !== '') && (
                <button
                  onClick={clearAllFilters}
                  className="text-sm bg-red-100 hover:bg-red-200 text-red-700 px-3 py-1 rounded-lg font-medium transition-colors"
                >
                  Limpar Todos
                </button>
              )}
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            {/* Período */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Período</label>
              <select
                value={dashboardFilters.periodo}
                onChange={(e) => {
                  if (e.target.value === 'personalizado') {
                    setShowCustomDateModal(true);
                  } else {
                    setDashboardFilters(prev => ({ ...prev, periodo: e.target.value }));
                  }
                }}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="todos">Todos</option>
                <option value="hoje">Hoje</option>
                <option value="semana">Esta semana</option>
                <option value="ultimo_mes">Último mês</option>
                <option value="ultimo_trimestre">Último trimestre</option>
                <option value="ultimo_ano">Último ano</option>
                <option value="personalizado">📅 Personalizado</option>
              </select>
            </div>

            {/* Funil */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Funil</label>
              <select
                value={dashboardFilters.funil}
                onChange={(e) => setDashboardFilters(prev => ({ ...prev, funil: e.target.value }))}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="todos">Todos os funis</option>
                {funnels.map(funnel => (
                  <option key={funnel.id} value={funnel.id}>{funnel.name}</option>
                ))}
              </select>
            </div>

            {/* Origem */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Origem</label>
              <select
                value={dashboardFilters.origem}
                onChange={(e) => setDashboardFilters(prev => ({ ...prev, origem: e.target.value }))}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="todas">Todas</option>
                {getAllSources().map(source => (
                  <option key={source} value={source}>{source}</option>
                ))}
              </select>
            </div>

            {/* Valor Mínimo */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Valor Mín.</label>
              <input
                type="number"
                value={dashboardFilters.valorMinimo}
                onChange={(e) => setDashboardFilters(prev => ({ ...prev, valorMinimo: e.target.value }))}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="R$ 0"
                min="0"
              />
            </div>

            {/* Valor Máximo */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Valor Máx.</label>
              <input
                type="number"
                value={dashboardFilters.valorMaximo}
                onChange={(e) => setDashboardFilters(prev => ({ ...prev, valorMaximo: e.target.value }))}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Sem limite"
                min="0"
              />
            </div>
          </div>

          {/* Filtros Ativos - Apenas uma linha simples */}
          {Object.values(dashboardFilters).some(v => v !== 'todos' && v !== 'todas' && v !== '') && (
            <div className="mt-4 pt-3 border-t border-gray-200">
              <div className="flex flex-wrap gap-2">
                {dashboardFilters.periodo !== 'todos' && (
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {dashboardFilters.periodo === 'ultimo_mes' ? 'Último Mês' : 
                     dashboardFilters.periodo === 'ultimo_trimestre' ? 'Último Trimestre' : 
                     dashboardFilters.periodo === 'ultimo_ano' ? 'Último Ano' :
                     dashboardFilters.periodo === 'hoje' ? 'Hoje' :
                     dashboardFilters.periodo === 'semana' ? 'Esta Semana' :
                     dashboardFilters.periodo === 'personalizado' ? 
                       `${dashboardFilters.dataInicial ? new Date(dashboardFilters.dataInicial).toLocaleDateString('pt-BR') : ''} - ${dashboardFilters.dataFinal ? new Date(dashboardFilters.dataFinal).toLocaleDateString('pt-BR') : ''}` :
                       dashboardFilters.periodo}
                    <button 
                      onClick={() => setDashboardFilters(prev => ({ 
                        ...prev, 
                        periodo: 'todos',
                        dataInicial: '',
                        dataFinal: ''
                      }))}
                      className="ml-1 text-blue-600 hover:text-blue-800"
                    >×</button>
                  </span>
                )}
                
                {dashboardFilters.funil !== 'todos' && (
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                    {funnels.find(f => f.id === dashboardFilters.funil)?.name || dashboardFilters.funil}
                    <button 
                      onClick={() => setDashboardFilters(prev => ({ ...prev, funil: 'todos' }))}
                      className="ml-1 text-purple-600 hover:text-purple-800"
                    >×</button>
                  </span>
                )}
                
                {dashboardFilters.origem !== 'todas' && (
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    {dashboardFilters.origem}
                    <button 
                      onClick={() => setDashboardFilters(prev => ({ ...prev, origem: 'todas' }))}
                      className="ml-1 text-green-600 hover:text-green-800"
                    >×</button>
                  </span>
                )}
                
                {(dashboardFilters.valorMinimo || dashboardFilters.valorMaximo) && (
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                    R$ {dashboardFilters.valorMinimo || '0'} - {dashboardFilters.valorMaximo || '∞'}
                    <button 
                      onClick={() => setDashboardFilters(prev => ({ ...prev, valorMinimo: '', valorMaximo: '' }))}
                      className="ml-1 text-yellow-600 hover:text-yellow-800"
                    >×</button>
                  </span>
                )}
              </div>
            </div>
          )}
        </div>

        <div className="p-6 bg-gray-50 min-h-screen overflow-auto">
          {/* KPIs Principais */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total de Leads</p>
                  <p className="text-3xl font-bold text-gray-900">{kpis.totalLeads}</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                  <svg className="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                  </svg>
                </div>
              </div>
              <div className="mt-4 flex items-center">
                <span className="text-green-600 text-sm font-medium">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? '🔍 Filtrado' : '📈 +12%'}
                </span>
                <span className="text-gray-500 text-sm ml-2">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? 'Dados filtrados' : 'vs. mês anterior'}
                </span>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Valor Total</p>
                  <p className="text-3xl font-bold text-gray-900">
                    {kpis.totalValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                  </p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                  <svg className="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1.41 16.09V20h-2.67v-1.93c-1.71-.36-3.16-1.46-3.27-3.4h1.96c.1 1.05.82 1.87 2.65 1.87 1.96 0 2.4-.98 2.4-1.59 0-.83-.44-1.61-2.67-2.14-2.48-.6-4.18-1.62-4.18-3.67 0-1.72 1.39-2.84 3.11-3.21V4h2.67v1.95c1.86.45 2.79 1.86 2.85 3.39H14.3c-.05-1.11-.64-1.87-2.22-1.87-1.5 0-2.4.68-2.4 1.64 0 .84.65 1.39 2.67 1.91s4.18 1.39 4.18 3.91c-.01 1.83-1.38 2.83-3.12 3.16z"/>
                  </svg>
                </div>
              </div>
              <div className="mt-4 flex items-center">
                <span className="text-green-600 text-sm font-medium">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? '🔍 Filtrado' : '📈 +8%'}
                </span>
                <span className="text-gray-500 text-sm ml-2">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? 'Dados filtrados' : 'vs. mês anterior'}
                </span>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Taxa de Conversão</p>
                  <p className="text-3xl font-bold text-gray-900">{kpis.taxaConversao}%</p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                  <svg className="w-6 h-6 text-purple-600" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"/>
                  </svg>
                </div>
              </div>
              <div className="mt-4 flex items-center">
                <span className="text-green-600 text-sm font-medium">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? '🔍 Filtrado' : '📈 +2.1%'}
                </span>
                <span className="text-gray-500 text-sm ml-2">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? 'Dados filtrados' : 'vs. mês anterior'}
                </span>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Ticket Médio</p>
                  <p className="text-3xl font-bold text-gray-900">
                    {kpis.ticketMedio.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                  </p>
                </div>
                <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                  <svg className="w-6 h-6 text-orange-600" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                </div>
              </div>
              <div className="mt-4 flex items-center">
                <span className="text-green-600 text-sm font-medium">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? '🔍 Filtrado' : '📈 +15%'}
                </span>
                <span className="text-gray-500 text-sm ml-2">
                  {kpis.filteredLeadsCount !== kpis.totalLeadsCount ? 'Dados filtrados' : 'vs. mês anterior'}
                </span>
              </div>
            </div>
          </div>

          {/* Performance por Etapa e Leads por Origem */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            {/* Performance por Etapa do Funil - Redesign Organizado */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                  <span className="mr-2">🎯</span>
                  Performance por Etapa
                </h3>
                {dashboardFilters.funil !== 'todos' && (
                  <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full font-medium">
                    {funnels.find(f => f.id === dashboardFilters.funil)?.name}
                  </span>
                )}
              </div>
              
              <div className="space-y-3">
                {kpis.funnelKPIs.map((etapa, index) => (
                  <div key={index} className="group hover:shadow-md transition-all duration-200 rounded-lg border border-gray-100 p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <div className={`w-3 h-3 rounded-full ${etapa.color.replace('bg-', 'bg-').replace('-50', '-400')}`}></div>
                        <h4 className="font-semibold text-gray-800 text-sm">{etapa.name}</h4>
                      </div>
                      <div className="text-right">
                        <span className="text-lg font-bold text-gray-800">{etapa.count}</span>
                        <span className="text-xs text-gray-500 ml-1">leads</span>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4 mb-3">
                      <div>
                        <p className="text-xs text-gray-500 mb-1">Valor Total</p>
                        <p className="text-sm font-semibold text-green-600">
                          {etapa.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                        </p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500 mb-1">% do Funil</p>
                        <p className="text-sm font-semibold text-blue-600">{etapa.percentage}%</p>
                      </div>
                    </div>
                    
                    {/* Barra de Progresso */}
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className={`h-2 rounded-full ${etapa.color.replace('bg-', 'bg-').replace('-50', '-400')} transition-all duration-1000`}
                        style={{ width: `${Math.min(parseFloat(etapa.percentage), 100)}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Resumo Total */}
              <div className="mt-6 p-4 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg border border-blue-100">
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div>
                    <p className="text-lg font-bold text-blue-600">{kpis.totalLeads}</p>
                    <p className="text-xs text-gray-600">Total Leads</p>
                  </div>
                  <div>
                    <p className="text-lg font-bold text-green-600">{kpis.vendasCount}</p>
                    <p className="text-xs text-gray-600">Vendas</p>
                  </div>
                  <div>
                    <p className="text-lg font-bold text-purple-600">{kpis.taxaConversao}%</p>
                    <p className="text-xs text-gray-600">Conversão</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Leads por Origem */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                  <span className="mr-2">📊</span>
                  Leads por Origem
                </h3>
                <select 
                  value={origemViewMode}
                  onChange={(e) => setOrigemViewMode(e.target.value)}
                  className="text-sm border border-gray-300 rounded-lg px-3 py-2 bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="geral">📊 Visão Geral</option>
                  <option value="por_funil">🎯 Rastreio por Funil</option>
                  <option value="por_etapa">📈 Rastreio por Etapa</option>
                </select>
              </div>
              
              <div className="space-y-4">
                {(() => {
                  // Renderizar com base no modo de visualização selecionado
                  if (origemViewMode === 'geral') {
                    // Visão Geral - Código original
                    return kpis.origemKPIs.slice(0, 6).map((origem, index) => {
                      const origemLeads = funnels.flatMap(funnel => 
                        Object.values(funnel.leads).flat()
                      ).filter(lead => lead.source === origem.source);
                      
                      const origemVendas = funnels.flatMap(funnel => 
                        (funnel.columns?.filter(col => 
                          col.name.toLowerCase().includes('venda') || 
                          col.name.toLowerCase().includes('fechad') ||
                          col.name.toLowerCase().includes('concluíd')
                        ) || []).flatMap(col => funnel.leads?.[col.id] || [])
                      ).filter(lead => lead.source === origem.source);
                      
                      const taxaConversaoOrigem = origemLeads.length > 0 ? 
                        ((origemVendas.length / origemLeads.length) * 100).toFixed(1) : 0;
                      
                      return (
                        <div key={index} className="bg-gray-50 rounded-lg hover:bg-gray-100 transition-all duration-200 overflow-hidden">
                          <div className="flex items-center justify-between p-3">
                            <div className="flex items-center space-x-3">
                              {getSourceIcon(origem.source)}
                              <div>
                                <p className="font-medium text-gray-800">{origem.source}</p>
                                <p className="text-sm text-gray-600">{origem.count} leads</p>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className="font-semibold text-gray-800">{origem.percentage}%</p>
                              <p className="text-sm text-green-600">
                                {origem.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                              </p>
                            </div>
                          </div>
                          
                          <div className="bg-white border-t border-gray-200 px-3 py-3">
                            <div className="grid grid-cols-3 gap-4 text-center">
                              <div>
                                <div className="text-lg font-bold text-blue-600">{origemLeads.length}</div>
                                <div className="text-xs text-gray-600">Total Leads</div>
                              </div>
                              <div>
                                <div className="text-lg font-bold text-green-600">{origemVendas.length}</div>
                                <div className="text-xs text-gray-600">Convertidos</div>
                              </div>
                              <div>
                                <div className="text-lg font-bold text-purple-600">{taxaConversaoOrigem}%</div>
                                <div className="text-xs text-gray-600">Taxa Conversão</div>
                              </div>
                            </div>
                            
                            <div className="mt-3">
                              <div className="flex items-center justify-between text-xs text-gray-600 mb-1">
                                <span>Conversão</span>
                                <span>{origemVendas.length}/{origemLeads.length}</span>
                              </div>
                              <div className="w-full bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-gradient-to-r from-green-400 to-green-600 h-2 rounded-full transition-all duration-1000"
                                  style={{ width: `${Math.min(parseFloat(taxaConversaoOrigem), 100)}%` }}
                                ></div>
                              </div>
                            </div>
                            
                            <div className="mt-3 flex justify-between items-center">
                              <div className="flex items-center space-x-2">
                                {parseFloat(taxaConversaoOrigem) >= 20 ? (
                                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    🔥 Alta Conversão
                                  </span>
                                ) : parseFloat(taxaConversaoOrigem) >= 10 ? (
                                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    ⚡ Boa Conversão
                                  </span>
                                ) : (
                                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    📈 Potencial de Melhoria
                                  </span>
                                )}
                              </div>
                              
                              {origemVendas.length > 0 && (
                                <div className="text-right">
                                  <div className="text-xs text-gray-500">Ticket Médio</div>
                                  <div className="text-sm font-semibold text-green-600">
                                    {(origemVendas.reduce((sum, lead) => sum + (lead.value || 0), 0) / origemVendas.length)
                                      .toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    });
                  } else if (origemViewMode === 'por_funil') {
                    // Rastreio por Funil
                    return kpis.origemKPIs.slice(0, 4).map((origem, index) => (
                      <div key={index} className="bg-gray-50 rounded-lg overflow-hidden">
                        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-3 border-b border-blue-200">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              {getSourceIcon(origem.source)}
                              <div>
                                <h4 className="font-semibold text-gray-800">{origem.source}</h4>
                                <p className="text-sm text-gray-600">{origem.count} leads totais</p>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className="text-sm font-medium text-blue-600">Distribuição por Funil</p>
                            </div>
                          </div>
                        </div>
                        
                        <div className="p-3">
                          <div className="space-y-3">
                            {funnels.map((funnel, funnelIndex) => {
                              const funnelLeads = Object.values(funnel.leads).flat().filter(lead => lead.source === origem.source);
                              const funnelValue = funnelLeads.reduce((sum, lead) => sum + (lead.value || 0), 0);
                              const funnelPercentage = origem.count > 0 ? ((funnelLeads.length / origem.count) * 100).toFixed(1) : 0;
                              
                              if (funnelLeads.length === 0) return null;
                              
                              return (
                                <div key={funnelIndex} className="flex items-center justify-between p-2 bg-white rounded border border-gray-100">
                                  <div className="flex items-center space-x-2">
                                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                                    <span className="text-sm font-medium text-gray-700">{funnel.name}</span>
                                  </div>
                                  <div className="flex items-center space-x-4">
                                    <div className="text-center">
                                      <div className="text-sm font-bold text-blue-600">{funnelLeads.length}</div>
                                      <div className="text-xs text-gray-500">leads</div>
                                    </div>
                                    <div className="text-center">
                                      <div className="text-sm font-bold text-green-600">
                                        {funnelValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                                      </div>
                                      <div className="text-xs text-gray-500">valor</div>
                                    </div>
                                    <div className="text-center">
                                      <div className="text-sm font-bold text-purple-600">{funnelPercentage}%</div>
                                      <div className="text-xs text-gray-500">do total</div>
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </div>
                    ));
                  } else if (origemViewMode === 'por_etapa') {
                    // Rastreio por Etapa
                    return kpis.origemKPIs.slice(0, 3).map((origem, index) => (
                      <div key={index} className="bg-gray-50 rounded-lg overflow-hidden">
                        <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-3 border-b border-green-200">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              {getSourceIcon(origem.source)}
                              <div>
                                <h4 className="font-semibold text-gray-800">{origem.source}</h4>
                                <p className="text-sm text-gray-600">{origem.count} leads • Jornada por Etapas</p>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className="text-sm font-medium text-green-600">Distribuição por Etapa</p>
                            </div>
                          </div>
                        </div>
                        
                        <div className="p-3">
                          <div className="space-y-2">
                            {(() => {
                              // Obter todas as etapas de todos os funis
                              const allColumns = funnels.flatMap(funnel => funnel.columns);
                              const uniqueColumnNames = [...new Set(allColumns.map(col => col.name))];
                              
                              return uniqueColumnNames.map((columnName, etapaIndex) => {
                                // Contar leads desta origem nesta etapa em todos os funis
                                const etapaLeads = funnels.flatMap(funnel => {
                                  const matchingColumns = funnel.columns.filter(col => col.name === columnName);
                                  return matchingColumns.flatMap(col => funnel.leads[col.id] || []);
                                }).filter(lead => lead.source === origem.source);
                                
                                const etapaValue = etapaLeads.reduce((sum, lead) => sum + (lead.value || 0), 0);
                                const etapaPercentage = origem.count > 0 ? ((etapaLeads.length / origem.count) * 100).toFixed(1) : 0;
                                
                                if (etapaLeads.length === 0) return null;
                                
                                // Determinar cor da etapa
                                const columnData = allColumns.find(col => col.name === columnName);
                                const etapaColor = columnData?.color?.replace('bg-', 'bg-').replace('-50', '-400') || 'bg-gray-400';
                                
                                return (
                                  <div key={etapaIndex} className="flex items-center justify-between p-2 bg-white rounded border border-gray-100 hover:shadow-sm transition-shadow">
                                    <div className="flex items-center space-x-3">
                                      <div className={`w-3 h-3 ${etapaColor} rounded-full`}></div>
                                      <span className="text-sm font-medium text-gray-700">{columnName}</span>
                                    </div>
                                    <div className="flex items-center space-x-3">
                                      <div className="text-center">
                                        <div className="text-sm font-bold text-blue-600">{etapaLeads.length}</div>
                                        <div className="text-xs text-gray-500">leads</div>
                                      </div>
                                      <div className="text-center">
                                        <div className="text-sm font-bold text-green-600">
                                          {etapaValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                                        </div>
                                        <div className="text-xs text-gray-500">valor</div>
                                      </div>
                                      <div className="text-center">
                                        <div className="text-sm font-bold text-purple-600">{etapaPercentage}%</div>
                                        <div className="text-xs text-gray-500">do total</div>
                                      </div>
                                    </div>
                                  </div>
                                );
                              }).filter(Boolean);
                            })()}
                          </div>
                          
                          {/* Resumo da Jornada */}
                          <div className="mt-4 p-3 bg-gradient-to-r from-gray-50 to-green-50 rounded-lg border border-green-100">
                            <div className="grid grid-cols-3 gap-4 text-center">
                              <div>
                                <p className="text-sm font-bold text-blue-600">{origem.count}</p>
                                <p className="text-xs text-gray-600">Total Leads</p>
                              </div>
                              <div>
                                <p className="text-sm font-bold text-green-600">
                                  {origem.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                                </p>
                                <p className="text-xs text-gray-600">Valor Total</p>
                              </div>
                              <div>
                                <p className="text-sm font-bold text-purple-600">{origem.percentage}%</p>
                                <p className="text-xs text-gray-600">Participação</p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ));
                  }
                })()}
              </div>
            </div>
          </div>

          {/* Demografia */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">👥</span>
                Distribuição por Sexo
              </h3>
              
              <div className="grid grid-cols-3 gap-4">
                <div className="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-3">
                    <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L18 4L16 6L14 4L12 6L10 4L8 6L6 4L3 7V9H21ZM21 10H3V12H21V10Z"/>
                    </svg>
                  </div>
                  <p className="text-2xl font-bold text-blue-600">{kpis.sexoStats.Masculino}</p>
                  <p className="text-sm text-blue-600 font-medium">Masculino</p>
                  <p className="text-xs text-gray-500 mt-1">
                    {kpis.totalLeads > 0 ? ((kpis.sexoStats.Masculino / kpis.totalLeads) * 100).toFixed(1) : 0}%
                  </p>
                </div>

                <div className="text-center p-4 bg-pink-50 rounded-lg border border-pink-200">
                  <div className="w-12 h-12 bg-pink-500 rounded-full flex items-center justify-center mx-auto mb-3">
                    <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 4A4 4 0 1 1 8 8A4 4 0 0 1 12 4M12 6A2 2 0 1 0 14 8A2 2 0 0 0 12 6M12 13C8.67 13 2 14.67 2 18V20H22V18C22 14.67 15.33 13 12 13Z"/>
                    </svg>
                  </div>
                  <p className="text-2xl font-bold text-pink-600">{kpis.sexoStats.Feminino}</p>
                  <p className="text-sm text-pink-600 font-medium">Feminino</p>
                  <p className="text-xs text-gray-500 mt-1">
                    {kpis.totalLeads > 0 ? ((kpis.sexoStats.Feminino / kpis.totalLeads) * 100).toFixed(1) : 0}%
                  </p>
                </div>

                <div className="text-center p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <div className="w-12 h-12 bg-gray-500 rounded-full flex items-center justify-center mx-auto mb-3">
                    <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM12 20C13.1 20 14 19.1 14 18C14 16.9 13.1 16 12 16C10.9 16 10 16.9 10 18C10 19.1 10.9 20 12 20ZM12 13C13.1 13 14 12.1 14 11C14 9.9 13.1 9 12 9C10.9 9 10 9.9 10 11C10 12.1 10.9 13 12 13Z"/>
                    </svg>
                  </div>
                  <p className="text-2xl font-bold text-gray-600">{kpis.sexoStats.NaoInformado}</p>
                  <p className="text-sm text-gray-600 font-medium">Não Informado</p>
                  <p className="text-xs text-gray-500 mt-1">
                    {kpis.totalLeads > 0 ? ((kpis.sexoStats.NaoInformado / kpis.totalLeads) * 100).toFixed(1) : 0}%
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">🎂</span>
                Distribuição por Faixa Etária
              </h3>
              
              <div className="space-y-4">
                {Object.entries(kpis.idadeStats).map(([faixa, count], index) => {
                  const colors = ['bg-green-500', 'bg-blue-500', 'bg-purple-500', 'bg-orange-500', 'bg-gray-500'];
                  const bgColors = ['bg-green-50', 'bg-blue-50', 'bg-purple-50', 'bg-orange-50', 'bg-gray-50'];
                  const textColors = ['text-green-600', 'text-blue-600', 'text-purple-600', 'text-orange-600', 'text-gray-600'];
                  
                  return (
                    <div key={faixa} className={`${bgColors[index]} rounded-lg p-4 border-l-4 border-${colors[index].split('-')[1]}-500`}>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className={`w-3 h-3 ${colors[index]} rounded-full`}></div>
                          <span className="font-medium text-gray-800">
                            {faixa === 'NaoInformado' ? 'Não Informado' : `${faixa} anos`}
                          </span>
                        </div>
                        <div className="text-right">
                          <span className={`font-bold ${textColors[index]}`}>{count}</span>
                          <span className="text-sm text-gray-500 ml-2">
                            ({kpis.totalLeads > 0 ? ((count / kpis.totalLeads) * 100).toFixed(1) : 0}%)
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </>
    );
  };

  // COMPONENTE DO CRM
  const CRMContent = () => (
    <>
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex flex-col space-y-3">
            <div className="flex items-center space-x-4">
              {editingFunnel ? (
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={tempFunnelName}
                    onChange={(e) => setTempFunnelName(e.target.value)}
                    className="text-lg font-bold text-gray-800 border border-gray-300 rounded-lg px-3 py-1 bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Nome do funil"
                    autoFocus
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        handleSaveFunnel();
                      } else if (e.key === 'Escape') {
                        handleCancelEditFunnel();
                      }
                    }}
                  />
                  <button
                    onClick={handleSaveFunnel}
                    className="w-8 h-8 flex items-center justify-center text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                    title="Salvar"
                  >
                    <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                    </svg>
                  </button>
                  <button
                    onClick={handleCancelEditFunnel}
                    className="w-8 h-8 flex items-center justify-center text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                    title="Cancelar"
                  >
                    <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                  </button>
                </div>
              ) : (
                <div className="flex items-center space-x-3">
                  <h2 className="text-lg font-bold text-gray-800">{funnelName}</h2>
                  <button
                    onClick={handleEditFunnel}
                    className="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                    title="Editar nome do funil"
                  >
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                    </svg>
                  </button>
                </div>
              )}
              <select 
                value={currentFunnelId}
                onChange={(e) => {
                  if (e.target.value === 'create_new') {
                    handleCreateFunnel();
                  } else {
                    setCurrentFunnelId(e.target.value);
                  }
                }}
                className="border border-gray-300 rounded-lg px-3 py-2 text-sm bg-white min-w-48"
              >
                {funnels.map(funnel => (
                  <option key={funnel.id} value={funnel.id}>
                    {funnel.name}
                  </option>
                ))}
                <option value="create_new" className="text-green-600 font-medium">
                  ➕ Criar Novo Funil
                </option>
              </select>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={handleDeleteFunnel}
                className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                </svg>
                Excluir Funil
              </button>
              <button 
                onClick={handleCreateColumn}
                className="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                Nova Coluna
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="p-4 bg-gray-50 overflow-x-auto">
        <div className="flex gap-4 min-w-max">
          {columns.map(column => (
            <div key={column.id} className="w-80 flex-shrink-0">
              <Column
                column={column}
                leads={leads[column.id] || []}
                count={(leads[column.id] || []).length}
              />
            </div>
          ))}
        </div>
      </div>
    </>
  );

  // COMPONENTE DA PÁGINA DE CLIENTES
  const ClientesContent = () => {
    // Obter todos os leads de todas as colunas
    const allLeads = Object.values(leads).flat();
    const currentClient = viewingClientId ? allLeads.find(lead => lead.id === viewingClientId) : null;

    if (currentClient) {
      return <FichaCompletaContent lead={currentClient} />;
    }

    return (
      <>
        <div className="bg-white p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-gray-800">Gestão de Clientes</h2>
              <p className="text-gray-600 mt-1">Visualize e gerencie todos os seus leads e clientes</p>
            </div>
            <div className="flex items-center space-x-3">
              <div className="bg-gray-100 px-4 py-2 rounded-lg">
                <span className="text-sm font-medium text-gray-700">
                  Total: {allLeads.length} leads
                </span>
              </div>
              <button
                onClick={handleBackToDashboard}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z"/>
                </svg>
                Voltar ao Dashboard
              </button>
            </div>
          </div>
        </div>

        <div className="p-6 bg-gray-50 min-h-screen">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {allLeads.map(lead => (
              <div key={lead.id} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-lg transition-all duration-200">
                {/* Header do Card */}
                <div className="flex items-center justify-between mb-4">
                  <div className={`w-12 h-12 rounded-full ${lead.color} flex items-center justify-center text-white font-bold`}>
                    {lead.avatar}
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">
                      {columns.find(col => leads[col.id]?.some(l => l.id === lead.id))?.name || 'Sem coluna'}
                    </span>
                  </div>
                </div>

                {/* Informações Básicas */}
                <div className="mb-4">
                  <h3 className="font-semibold text-gray-800 text-lg mb-1">{lead.name}</h3>
                  <p className="text-sm text-gray-600 mb-2">📞 {lead.phone}</p>
                  <div className="flex items-center space-x-2 mb-2">
                    {getSourceIcon(lead.source)}
                    <span className="text-sm text-gray-600">{lead.source}</span>
                  </div>
                  {lead.value > 0 && (
                    <p className="text-sm font-semibold text-green-600">
                      💰 {lead.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                    </p>
                  )}
                </div>

                {/* Ações */}
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleViewCompleteProfile(lead)}
                    className="flex-1 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white text-sm font-medium py-2 px-4 rounded-lg transition-all duration-200 flex items-center justify-center space-x-2"
                  >
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
                      <polyline points="14,2 14,8 20,8"/>
                    </svg>
                    <span>Ver Ficha</span>
                  </button>
                  <button
                    onClick={() => handleEditCard(lead, columns.find(col => leads[col.id]?.some(l => l.id === lead.id))?.id)}
                    className="bg-gray-100 hover:bg-gray-200 text-gray-700 p-2 rounded-lg transition-colors"
                    title="Editar"
                  >
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                    </svg>
                  </button>
                </div>
              </div>
            ))}
          </div>

          {allLeads.length === 0 && (
            <div className="text-center py-12">
              <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-12 h-12 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-800 mb-2">Nenhum cliente encontrado</h3>
              <p className="text-gray-600">Adicione leads no funil para visualizá-los aqui</p>
            </div>
          )}
        </div>
      </>
    );
  };

  // COMPONENTE DA FICHA COMPLETA
  const FichaCompletaContent = ({ lead }) => {
    const [activeTab, setActiveTab] = useState('dados');
    const [editingField, setEditingField] = useState(null);
    const [fieldValues, setFieldValues] = useState({
      email: lead.email || '',
      empresa: lead.empresa || '',
      cargo: lead.cargo || '',
      endereco: lead.endereco || '',
      observacoes: lead.observacoes || '',
      origem_detalhes: lead.origem_detalhes || ''
    });

    return (
      <>
        {/* Header da Ficha */}
        <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setViewingClientId(null)}
                className="w-10 h-10 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z"/>
                </svg>
              </button>
              <div className={`w-16 h-16 rounded-full ${lead.color} flex items-center justify-center text-white text-xl font-bold`}>
                {lead.avatar}
              </div>
              <div>
                <h1 className="text-2xl font-bold">{lead.name}</h1>
                <p className="text-blue-100">Cliente desde {new Date(lead.dataContato || Date.now()).toLocaleDateString('pt-BR')}</p>
                <div className="flex items-center space-x-4 mt-2">
                  <span className="text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">
                    📞 {lead.phone}
                  </span>
                  <span className="text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">
                    🎯 {lead.source}
                  </span>
                  {lead.value > 0 && (
                    <span className="text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">
                      💰 {lead.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                    </span>
                  )}
                </div>
              </div>
            </div>
            <div className="flex space-x-3">
              <button className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                📞 Ligar
              </button>
              <button className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                💬 WhatsApp
              </button>
              <button className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                ✉️ Email
              </button>
            </div>
          </div>
        </div>

        {/* Navegação por Abas */}
        <div className="bg-white border-b border-gray-200">
          <div className="px-6">
            <nav className="flex space-x-8">
              {[
                { id: 'dados', label: 'Dados Pessoais', icon: '👤' },
                { id: 'profissional', label: 'Informações Profissionais', icon: '🏢' },
                { id: 'historico', label: 'Histórico de Contatos', icon: '📋' },
                { id: 'documentos', label: 'Documentos', icon: '📎' },
                { id: 'observacoes', label: 'Observações', icon: '📝' }
              ].map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-4 px-2 border-b-2 font-medium text-sm transition-colors ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <span className="mr-2">{tab.icon}</span>
                  {tab.label}
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Conteúdo das Abas */}
        <div className="p-6 bg-gray-50 min-h-screen">
          {activeTab === 'dados' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                  <span className="mr-2">👤</span>
                  Informações Básicas
                </h3>
                
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Nome Completo</label>
                    <div className="text-gray-800 font-medium">{lead.name}</div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Telefone</label>
                    <div className="text-gray-800">{lead.phone}</div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                    {editingField === 'email' ? (
                      <div className="flex space-x-2">
                        <input
                          type="email"
                          value={fieldValues.email}
                          onChange={(e) => setFieldValues(prev => ({ ...prev, email: e.target.value }))}
                          className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm"
                          placeholder="email@exemplo.com"
                        />
                        <button 
                          onClick={() => setEditingField(null)}
                          className="bg-green-500 text-white px-3 py-2 rounded-lg text-sm"
                        >
                          ✅
                        </button>
                      </div>
                    ) : (
                      <div className="flex items-center justify-between">
                        <span className="text-gray-800">{fieldValues.email || 'Não informado'}</span>
                        <button 
                          onClick={() => setEditingField('email')}
                          className="text-blue-600 hover:text-blue-800 text-sm"
                        >
                          ✏️ Editar
                        </button>
                      </div>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Endereço</label>
                    {editingField === 'endereco' ? (
                      <div className="flex space-x-2">
                        <textarea
                          value={fieldValues.endereco}
                          onChange={(e) => setFieldValues(prev => ({ ...prev, endereco: e.target.value }))}
                          className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm"
                          placeholder="Endereço completo..."
                          rows="3"
                        />
                        <button 
                          onClick={() => setEditingField(null)}
                          className="bg-green-500 text-white px-3 py-2 rounded-lg text-sm"
                        >
                          ✅
                        </button>
                      </div>
                    ) : (
                      <div className="flex items-start justify-between">
                        <span className="text-gray-800">{fieldValues.endereco || 'Não informado'}</span>
                        <button 
                          onClick={() => setEditingField('endereco')}
                          className="text-blue-600 hover:text-blue-800 text-sm"
                        >
                          ✏️ Editar
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                  <span className="mr-2">🎯</span>
                  Origem e Captação
                </h3>
                
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Fonte Principal</label>
                    <div className="flex items-center space-x-2">
                      {getSourceIcon(lead.source)}
                      <span className="text-gray-800 font-medium">{lead.source}</span>
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Detalhes da Origem</label>
                    {editingField === 'origem_detalhes' ? (
                      <div className="flex space-x-2">
                        <textarea
                          value={fieldValues.origem_detalhes}
                          onChange={(e) => setFieldValues(prev => ({ ...prev, origem_detalhes: e.target.value }))}
                          className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm"
                          placeholder="Como chegou até nós, campanha específica..."
                          rows="3"
                        />
                        <button 
                          onClick={() => setEditingField(null)}
                          className="bg-green-500 text-white px-3 py-2 rounded-lg text-sm"
                        >
                          ✅
                        </button>
                      </div>
                    ) : (
                      <div className="flex items-start justify-between">
                        <span className="text-gray-800">{fieldValues.origem_detalhes || 'Não informado'}</span>
                        <button 
                          onClick={() => setEditingField('origem_detalhes')}
                          className="text-blue-600 hover:text-blue-800 text-sm"
                        >
                          ✏️ Editar
                        </button>
                      </div>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Primeiro Contato</label>
                    <div className="text-gray-800">
                      {new Date(lead.dataContato || Date.now()).toLocaleDateString('pt-BR', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Status Atual</label>
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                      ✅ {lead.status || 'Ativo'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'profissional' && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">🏢</span>
                Informações Profissionais
              </h3>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Empresa</label>
                    {editingField === 'empresa' ? (
                      <div className="flex space-x-2">
                        <input
                          type="text"
                          value={fieldValues.empresa}
                          onChange={(e) => setFieldValues(prev => ({ ...prev, empresa: e.target.value }))}
                          className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm"
                          placeholder="Nome da empresa..."
                        />
                        <button 
                          onClick={() => setEditingField(null)}
                          className="bg-green-500 text-white px-3 py-2 rounded-lg text-sm"
                        >
                          ✅
                        </button>
                      </div>
                    ) : (
                      <div className="flex items-center justify-between">
                        <span className="text-gray-800">{fieldValues.empresa || 'Não informado'}</span>
                        <button 
                          onClick={() => setEditingField('empresa')}
                          className="text-blue-600 hover:text-blue-800 text-sm"
                        >
                          ✏️ Editar
                        </button>
                      </div>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Cargo/Função</label>
                    {editingField === 'cargo' ? (
                      <div className="flex space-x-2">
                        <input
                          type="text"
                          value={fieldValues.cargo}
                          onChange={(e) => setFieldValues(prev => ({ ...prev, cargo: e.target.value }))}
                          className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm"
                          placeholder="Cargo ou função..."
                        />
                        <button 
                          onClick={() => setEditingField(null)}
                          className="bg-green-500 text-white px-3 py-2 rounded-lg text-sm"
                        >
                          ✅
                        </button>
                      </div>
                    ) : (
                      <div className="flex items-center justify-between">
                        <span className="text-gray-800">{fieldValues.cargo || 'Não informado'}</span>
                        <button 
                          onClick={() => setEditingField('cargo')}
                          className="text-blue-600 hover:text-blue-800 text-sm"
                        >
                          ✏️ Editar
                        </button>
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Valor Potencial</label>
                    <div className="text-2xl font-bold text-green-600">
                      {lead.value > 0 ? lead.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }) : 'Não informado'}
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Etapa Atual</label>
                    <div className="text-gray-800 font-medium">
                      {columns.find(col => leads[col.id]?.some(l => l.id === lead.id))?.name || 'Sem etapa definida'}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'historico' && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">📋</span>
                Histórico de Contatos
              </h3>
              
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                  </svg>
                </div>
                <h4 className="text-lg font-medium text-gray-800 mb-2">Em breve!</h4>
                <p className="text-gray-600">Histórico detalhado de todas as interações será implementado em breve.</p>
              </div>
            </div>
          )}

          {activeTab === 'documentos' && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">📎</span>
                Documentos e Anexos
              </h3>
              
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
                  </svg>
                </div>
                <h4 className="text-lg font-medium text-gray-800 mb-2">Em breve!</h4>
                <p className="text-gray-600">Sistema de upload e gerenciamento de documentos será implementado em breve.</p>
              </div>
            </div>
          )}

          {activeTab === 'observacoes' && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">📝</span>
                Observações e Anotações
              </h3>
              
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Observações Gerais</label>
                  {editingField === 'observacoes' ? (
                    <div className="space-y-3">
                      <textarea
                        value={fieldValues.observacoes}
                        onChange={(e) => setFieldValues(prev => ({ ...prev, observacoes: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-4 py-3 text-sm"
                        placeholder="Adicione suas observações sobre este cliente..."
                        rows="6"
                      />
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => setEditingField(null)}
                          className="bg-green-500 text-white px-4 py-2 rounded-lg text-sm font-medium"
                        >
                          ✅ Salvar
                        </button>
                        <button 
                          onClick={() => setEditingField(null)}
                          className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium"
                        >
                          Cancelar
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div>
                      <div className="bg-gray-50 rounded-lg p-4 min-h-32 mb-3">
                        {fieldValues.observacoes ? (
                          <p className="text-gray-800 whitespace-pre-wrap">{fieldValues.observacoes}</p>
                        ) : (
                          <p className="text-gray-500 italic">Nenhuma observação adicionada ainda...</p>
                        )}
                      </div>
                      <button 
                        onClick={() => setEditingField('observacoes')}
                        className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                      >
                        ✏️ {fieldValues.observacoes ? 'Editar' : 'Adicionar'} Observações
                      </button>
                    </div>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Observações Rápidas (Do CRM)</label>
                  <div className="bg-blue-50 rounded-lg p-4">
                    {lead.notes ? (
                      <p className="text-blue-800">{lead.notes}</p>
                    ) : (
                      <p className="text-blue-600 italic">Nenhuma observação rápida...</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </>
    );
  };

  // COMPONENTE DE CONFIGURAÇÕES
  const ConfiguracoesContent = () => {
    const [activeConfigTab, setActiveConfigTab] = useState('colaboradores');

    return (
      <>
        {/* Header */}
        <div className="bg-white p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-gray-800">Configurações do Sistema</h2>
              <p className="text-gray-600 mt-1">Gerencie colaboradores, permissões e configurações gerais</p>
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={handleBackToDashboard}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center"
              >
                <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z"/>
                </svg>
                Voltar ao Dashboard
              </button>
            </div>
          </div>
        </div>

        {/* Navegação por Abas */}
        <div className="bg-white border-b border-gray-200">
          <div className="px-6">
            <nav className="flex space-x-8">
              {[
                { id: 'colaboradores', label: 'Colaboradores', icon: '👥' },
                { id: 'sistema', label: 'Sistema', icon: '⚙️' },
                { id: 'integracao', label: 'Integrações', icon: '🔗' },
                { id: 'backup', label: 'Backup', icon: '💾' }
              ].map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveConfigTab(tab.id)}
                  className={`py-4 px-2 border-b-2 font-medium text-sm transition-colors ${
                    activeConfigTab === tab.id
                      ? 'border-purple-500 text-purple-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <span className="mr-2">{tab.icon}</span>
                  {tab.label}
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Conteúdo das Abas */}
        <div className="p-6 bg-gray-50 min-h-screen">
          {activeConfigTab === 'colaboradores' && (
            <div className="space-y-6">
              {/* Header da Seção */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                      <span className="mr-2">👥</span>
                      Gerenciamento de Colaboradores
                    </h3>
                    <p className="text-gray-600 mt-1">Gerencie acesso, permissões e dados dos colaboradores</p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-sm text-gray-600">
                      {collaborators.length} colaboradores cadastrados
                    </span>
                    <button className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center">
                      <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                      </svg>
                      Novo Colaborador
                    </button>
                  </div>
                </div>
              </div>

              {/* Lista de Colaboradores */}
              <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                {collaborators.map(collaborator => (
                  <div key={collaborator.id} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-200">
                    {/* Header do Card */}
                    <div className={`${collaborator.color} p-4 text-white relative`}>
                      <div className="flex items-center space-x-3">
                        <div className="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                          <span className="text-white font-bold text-lg">{collaborator.avatar}</span>
                        </div>
                        <div className="flex-1">
                          <h4 className="font-semibold text-lg">{collaborator.name}</h4>
                          <p className="text-white text-opacity-90 text-sm">{collaborator.role}</p>
                        </div>
                        <div className={`w-3 h-3 rounded-full ${
                          collaborator.status === 'online' ? 'bg-green-400' :
                          collaborator.status === 'away' ? 'bg-yellow-400' : 'bg-gray-400'
                        }`} title={collaborator.status}></div>
                      </div>
                    </div>

                    {/* Conteúdo do Card */}
                    <div className="p-4 space-y-4">
                      <div>
                        <label className="block text-xs font-medium text-gray-500 mb-1">EMAIL DE ACESSO</label>
                        <div className="text-sm text-gray-800 break-all">{collaborator.email}</div>
                      </div>

                      <div>
                        <label className="block text-xs font-medium text-gray-500 mb-1">ÚLTIMO ACESSO</label>
                        <div className="text-sm text-gray-600">
                          {new Date(collaborator.lastLogin).toLocaleDateString('pt-BR', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </div>
                      </div>

                      <div>
                        <label className="block text-xs font-medium text-gray-500 mb-2">PERMISSÕES</label>
                        <div className="flex flex-wrap gap-1">
                          {collaborator.permissions.slice(0, 3).map(permission => (
                            <span key={permission} className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                              {permission === 'dashboard' ? '📊 Dashboard' :
                               permission === 'crm' ? '👥 CRM' :
                               permission === 'clientes' ? '🏆 Clientes' :
                               permission === 'configuracoes' ? '⚙️ Config' :
                               permission === 'relatorios' ? '📋 Relatórios' : permission}
                            </span>
                          ))}
                          {collaborator.permissions.length > 3 && (
                            <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full">
                              +{collaborator.permissions.length - 3}
                            </span>
                          )}
                        </div>
                      </div>

                      {/* Ações */}
                      <div className="pt-3 border-t border-gray-200 flex space-x-2">
                        <button
                          onClick={() => handleEditCollaborator(collaborator)}
                          className="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-700 py-2 px-3 rounded-lg text-sm font-medium transition-colors flex items-center justify-center"
                        >
                          <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                          </svg>
                          Editar
                        </button>
                        <button
                          onClick={() => handleChangePassword(collaborator.id)}
                          className="bg-yellow-50 hover:bg-yellow-100 text-yellow-700 py-2 px-3 rounded-lg text-sm font-medium transition-colors flex items-center justify-center"
                          title="Trocar Senha"
                        >
                          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L18 4L16 6L14 4L12 6L10 4L8 6L6 4L3 7V9H21Z"/>
                          </svg>
                        </button>
                        <button
                          onClick={() => handleDeleteCollaborator(collaborator.id)}
                          className="bg-red-50 hover:bg-red-100 text-red-700 py-2 px-3 rounded-lg text-sm font-medium transition-colors flex items-center justify-center"
                          title="Remover"
                        >
                          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Outras abas */}
          {activeConfigTab === 'sistema' && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">⚙️</span>
                Configurações do Sistema
              </h3>
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                  </svg>
                </div>
                <h4 className="text-lg font-medium text-gray-800 mb-2">Em desenvolvimento</h4>
                <p className="text-gray-600">Configurações do sistema serão implementadas em breve.</p>
              </div>
            </div>
          )}

          {activeConfigTab === 'integracao' && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">🔗</span>
                Integrações
              </h3>
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                  </svg>
                </div>
                <h4 className="text-lg font-medium text-gray-800 mb-2">Em desenvolvimento</h4>
                <p className="text-gray-600">Integrações com APIs externas serão implementadas em breve.</p>
              </div>
            </div>
          )}

          {activeConfigTab === 'backup' && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
                <span className="mr-2">💾</span>
                Backup e Segurança
              </h3>
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                  </svg>
                </div>
                <h4 className="text-lg font-medium text-gray-800 mb-2">Em desenvolvimento</h4>
                <p className="text-gray-600">Sistema de backup automático será implementado em breve.</p>
              </div>
            </div>
          )}
        </div>
      </>
    );
  };

  return (
    <div className="flex flex-col h-screen bg-gray-100 relative">
      {/* Header Superior */}
      <TopHeader />
      
      {/* Container Principal */}
      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar Moderno */}
        <div className="w-64 bg-gradient-to-b from-slate-900 via-slate-800 to-gray-900 text-white flex flex-col relative">
          {/* Efeito de brilho sutil */}
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent pointer-events-none"></div>
          
          {/* Navigation */}
          <nav className="flex-1 py-6 px-4 space-y-2">
            {/* Dashboard */}
            <button 
              onClick={() => setCurrentPage('dashboard')}
              className={`group w-full flex items-center px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 ${
                currentPage === 'dashboard' 
                  ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white shadow-lg shadow-purple-500/30' 
                  : 'hover:bg-white/10 text-gray-300 hover:text-white'
              }`}
            >
              <div className={`w-8 h-8 rounded-lg flex items-center justify-center mr-3 transition-colors ${
                currentPage === 'dashboard' 
                  ? 'bg-white/20' 
                  : 'bg-white/10 group-hover:bg-white/20'
              }`}>
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                </svg>
              </div>
              <span className="text-sm font-medium">Dashboard</span>
              {currentPage === 'dashboard' && (
                <div className="ml-auto w-2 h-2 bg-white rounded-full animate-pulse"></div>
              )}
            </button>

            {/* CRM */}
            <button 
              onClick={() => setCurrentPage('crm')}
              className={`group w-full flex items-center px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 ${
                currentPage === 'crm' 
                  ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg shadow-blue-500/30' 
                  : 'hover:bg-white/10 text-gray-300 hover:text-white'
              }`}
            >
              <div className={`w-8 h-8 rounded-lg flex items-center justify-center mr-3 transition-colors ${
                currentPage === 'crm' 
                  ? 'bg-white/20' 
                  : 'bg-white/10 group-hover:bg-white/20'
              }`}>
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                </svg>
              </div>
              <span className="text-sm font-medium">CRM</span>
              {currentPage === 'crm' && (
                <div className="ml-auto w-2 h-2 bg-white rounded-full animate-pulse"></div>
              )}
            </button>

            {/* Chat */}
            <button className="group w-full flex items-center px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:bg-white/10 text-gray-300 hover:text-white relative">
              <div className="w-8 h-8 rounded-lg flex items-center justify-center mr-3 transition-colors bg-white/10 group-hover:bg-white/20">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clipRule="evenodd"/>
                </svg>
              </div>
              <span className="text-sm font-medium">Chat</span>
              <div className="ml-auto w-5 h-5 bg-red-500 text-white rounded-full text-xs flex items-center justify-center animate-bounce">3</div>
            </button>

            {/* Clientes */}
            <button 
              onClick={() => setCurrentPage('clientes')}
              className={`group w-full flex items-center px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 ${
                currentPage === 'clientes' 
                  ? 'bg-gradient-to-r from-green-600 to-green-700 text-white shadow-lg shadow-green-500/30' 
                  : 'hover:bg-white/10 text-gray-300 hover:text-white'
              }`}
            >
              <div className={`w-8 h-8 rounded-lg flex items-center justify-center mr-3 transition-colors ${
                currentPage === 'clientes' 
                  ? 'bg-white/20' 
                  : 'bg-white/10 group-hover:bg-white/20'
              }`}>
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
              <span className="text-sm font-medium">Clientes</span>
              {currentPage === 'clientes' && (
                <div className="ml-auto w-2 h-2 bg-white rounded-full animate-pulse"></div>
              )}
            </button>

            {/* Metas */}
            <button className="group w-full flex items-center px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:bg-white/10 text-gray-300 hover:text-white">
              <div className="w-8 h-8 rounded-lg flex items-center justify-center mr-3 transition-colors bg-white/10 group-hover:bg-white/20">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </div>
              <span className="text-sm font-medium">Metas</span>
              <div className="ml-auto">
                <div className="w-12 h-2 bg-white/20 rounded-full overflow-hidden">
                  <div className="h-full bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full" style={{ width: '73%' }}></div>
                </div>
              </div>
            </button>

            {/* Separador */}
            <div className="my-4 border-t border-white/10"></div>

            {/* Configurações */}
            <button 
              onClick={() => setCurrentPage('configuracoes')}
              className={`group w-full flex items-center px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 ${
                currentPage === 'configuracoes' 
                  ? 'bg-gradient-to-r from-indigo-600 to-indigo-700 text-white shadow-lg shadow-indigo-500/30' 
                  : 'hover:bg-white/10 text-gray-300 hover:text-white'
              }`}
            >
              <div className={`w-8 h-8 rounded-lg flex items-center justify-center mr-3 transition-colors ${
                currentPage === 'configuracoes' 
                  ? 'bg-white/20' 
                  : 'bg-white/10 group-hover:bg-white/20'
              }`}>
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd"/>
                </svg>
              </div>
              <span className="text-sm font-medium">Configurações</span>
              {currentPage === 'configuracoes' && (
                <div className="ml-auto w-2 h-2 bg-white rounded-full animate-pulse"></div>
              )}
            </button>
          </nav>

          {/* Footer com status */}
          <div className="p-4 border-t border-white/10">
            <div className="flex items-center space-x-3 p-3 bg-white/5 rounded-xl">
              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <div className="flex-1">
                <p className="text-xs font-medium text-white">Sistema Online</p>
                <p className="text-xs text-white/60">Conectado</p>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 bg-white overflow-hidden">
          {currentPage === 'dashboard' ? <DashboardContent /> : 
           currentPage === 'crm' ? <CRMContent /> : 
           currentPage === 'configuracoes' ? <ConfiguracoesContent /> :
           <ClientesContent />}
        </div>
      </div>

      <NewFunnelModal />
      <AddColumnToNewFunnelModal />
      <NewColumnModal />
      <EditColumnModal />
      <EditCardModal />
      <EditCollaboratorModal />
      <CustomDateModal />
      <DragGhost />
      <ColumnDragGhost />
    </div>
  );
};

export default CRMDashboard;